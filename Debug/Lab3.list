
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002760  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800286c  0800286c  0001286c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800288c  0800288c  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  0800288c  0800288c  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800288c  0800288c  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800288c  0800288c  0001288c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002890  08002890  00012890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08002894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000003c  080028d0  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  080028d0  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096bd  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c4f  00000000  00000000  00029722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  0002b378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002bda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b7d  00000000  00000000  0002c6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b89a  00000000  00000000  0004324d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823ac  00000000  00000000  0004eae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0e93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002870  00000000  00000000  000d0ee8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002854 	.word	0x08002854

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08002854 	.word	0x08002854

0800014c <update7SEG>:
enum ModeState modeState = INIT ;

 int led_buffer [4] = {0 , 0 , 0 , 0};


 void update7SEG ( int index ) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b03      	cmp	r3, #3
 8000158:	f200 808c 	bhi.w	8000274 <update7SEG+0x128>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <update7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000175 	.word	0x08000175
 8000168:	080001b5 	.word	0x080001b5
 800016c:	080001f5 	.word	0x080001f5
 8000170:	08000235 	.word	0x08000235
 	switch ( index ) {
 	case 0:
 		HAL_GPIO_WritePin ( SWITCH_1_B_PORT, SWITCH_1_B, SET ) ;
 8000174:	2201      	movs	r2, #1
 8000176:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800017a:	4841      	ldr	r0, [pc, #260]	; (8000280 <update7SEG+0x134>)
 800017c:	f001 fb41 	bl	8001802 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin ( SWITCH_1_C_PORT, SWITCH_1_C, SET ) ;
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000186:	483e      	ldr	r0, [pc, #248]	; (8000280 <update7SEG+0x134>)
 8000188:	f001 fb3b 	bl	8001802 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin ( SWITCH_1_D_PORT, SWITCH_1_D, SET ) ;
 800018c:	2201      	movs	r2, #1
 800018e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000192:	483b      	ldr	r0, [pc, #236]	; (8000280 <update7SEG+0x134>)
 8000194:	f001 fb35 	bl	8001802 <HAL_GPIO_WritePin>
 		display7SEG (led_buffer[index]);
 8000198:	4a3a      	ldr	r2, [pc, #232]	; (8000284 <update7SEG+0x138>)
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001a0:	4618      	mov	r0, r3
 80001a2:	f000 fcc5 	bl	8000b30 <display7SEG>
 		HAL_GPIO_WritePin ( SWITCH_1_A_PORT, SWITCH_1_A, RESET ) ;
 80001a6:	2200      	movs	r2, #0
 80001a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001ac:	4834      	ldr	r0, [pc, #208]	; (8000280 <update7SEG+0x134>)
 80001ae:	f001 fb28 	bl	8001802 <HAL_GPIO_WritePin>
 		break;
 80001b2:	e060      	b.n	8000276 <update7SEG+0x12a>
 	case 1:
 		HAL_GPIO_WritePin ( SWITCH_1_A_PORT, SWITCH_1_A, SET ) ;
 80001b4:	2201      	movs	r2, #1
 80001b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001ba:	4831      	ldr	r0, [pc, #196]	; (8000280 <update7SEG+0x134>)
 80001bc:	f001 fb21 	bl	8001802 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin ( SWITCH_1_C_PORT, SWITCH_1_C, SET ) ;
 80001c0:	2201      	movs	r2, #1
 80001c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c6:	482e      	ldr	r0, [pc, #184]	; (8000280 <update7SEG+0x134>)
 80001c8:	f001 fb1b 	bl	8001802 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin ( SWITCH_1_D_PORT, SWITCH_1_D, SET ) ;
 80001cc:	2201      	movs	r2, #1
 80001ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001d2:	482b      	ldr	r0, [pc, #172]	; (8000280 <update7SEG+0x134>)
 80001d4:	f001 fb15 	bl	8001802 <HAL_GPIO_WritePin>
 		display7SEG (led_buffer[index]);
 80001d8:	4a2a      	ldr	r2, [pc, #168]	; (8000284 <update7SEG+0x138>)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 fca5 	bl	8000b30 <display7SEG>
 		HAL_GPIO_WritePin ( SWITCH_1_B_PORT, SWITCH_1_B, RESET ) ;
 80001e6:	2200      	movs	r2, #0
 80001e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001ec:	4824      	ldr	r0, [pc, #144]	; (8000280 <update7SEG+0x134>)
 80001ee:	f001 fb08 	bl	8001802 <HAL_GPIO_WritePin>
 		break;
 80001f2:	e040      	b.n	8000276 <update7SEG+0x12a>
 	case 2:
 		HAL_GPIO_WritePin ( SWITCH_1_A_PORT, SWITCH_1_A, SET ) ;
 80001f4:	2201      	movs	r2, #1
 80001f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001fa:	4821      	ldr	r0, [pc, #132]	; (8000280 <update7SEG+0x134>)
 80001fc:	f001 fb01 	bl	8001802 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin ( SWITCH_1_B_PORT, SWITCH_1_B, SET ) ;
 8000200:	2201      	movs	r2, #1
 8000202:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000206:	481e      	ldr	r0, [pc, #120]	; (8000280 <update7SEG+0x134>)
 8000208:	f001 fafb 	bl	8001802 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin ( SWITCH_1_D_PORT, SWITCH_1_D, SET ) ;
 800020c:	2201      	movs	r2, #1
 800020e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000212:	481b      	ldr	r0, [pc, #108]	; (8000280 <update7SEG+0x134>)
 8000214:	f001 faf5 	bl	8001802 <HAL_GPIO_WritePin>
 		display7SEG (led_buffer[index]);
 8000218:	4a1a      	ldr	r2, [pc, #104]	; (8000284 <update7SEG+0x138>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000220:	4618      	mov	r0, r3
 8000222:	f000 fc85 	bl	8000b30 <display7SEG>
 		HAL_GPIO_WritePin ( SWITCH_1_C_PORT, SWITCH_1_C, RESET ) ;
 8000226:	2200      	movs	r2, #0
 8000228:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800022c:	4814      	ldr	r0, [pc, #80]	; (8000280 <update7SEG+0x134>)
 800022e:	f001 fae8 	bl	8001802 <HAL_GPIO_WritePin>
 		break;
 8000232:	e020      	b.n	8000276 <update7SEG+0x12a>
 	case 3:
 		HAL_GPIO_WritePin ( SWITCH_1_A_PORT, SWITCH_1_A, SET ) ;
 8000234:	2201      	movs	r2, #1
 8000236:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800023a:	4811      	ldr	r0, [pc, #68]	; (8000280 <update7SEG+0x134>)
 800023c:	f001 fae1 	bl	8001802 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin ( SWITCH_1_B_PORT, SWITCH_1_B, SET ) ;
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000246:	480e      	ldr	r0, [pc, #56]	; (8000280 <update7SEG+0x134>)
 8000248:	f001 fadb 	bl	8001802 <HAL_GPIO_WritePin>
 		HAL_GPIO_WritePin ( SWITCH_1_C_PORT, SWITCH_1_C, SET ) ;
 800024c:	2201      	movs	r2, #1
 800024e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000252:	480b      	ldr	r0, [pc, #44]	; (8000280 <update7SEG+0x134>)
 8000254:	f001 fad5 	bl	8001802 <HAL_GPIO_WritePin>
 		display7SEG (led_buffer[index]);
 8000258:	4a0a      	ldr	r2, [pc, #40]	; (8000284 <update7SEG+0x138>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000260:	4618      	mov	r0, r3
 8000262:	f000 fc65 	bl	8000b30 <display7SEG>
 		HAL_GPIO_WritePin ( SWITCH_1_D_PORT, SWITCH_1_D, RESET ) ;
 8000266:	2200      	movs	r2, #0
 8000268:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800026c:	4804      	ldr	r0, [pc, #16]	; (8000280 <update7SEG+0x134>)
 800026e:	f001 fac8 	bl	8001802 <HAL_GPIO_WritePin>
 		break;
 8000272:	e000      	b.n	8000276 <update7SEG+0x12a>
 	default:
 		break;
 8000274:	bf00      	nop
 	}
 }
 8000276:	bf00      	nop
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40010800 	.word	0x40010800
 8000284:	20000080 	.word	0x20000080

08000288 <setSwitch0>:

 void setSwitch0 ( int duration ) {
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 	switch_counter = duration / TIMER_CYCLE ;
 8000290:	220a      	movs	r2, #10
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	fb93 f3f2 	sdiv	r3, r3, r2
 8000298:	4a04      	ldr	r2, [pc, #16]	; (80002ac <setSwitch0+0x24>)
 800029a:	6013      	str	r3, [r2, #0]
 	switch_flag = 0;
 800029c:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <setSwitch0+0x28>)
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 }
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	2000005c 	.word	0x2000005c
 80002b0:	20000068 	.word	0x20000068

080002b4 <setTimer0>:

 void setTimer0 ( int duration ) {
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 	timer0_counter = duration / TIMER_CYCLE ;
 80002bc:	220a      	movs	r2, #10
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80002c4:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <setTimer0+0x24>)
 80002c6:	6013      	str	r3, [r2, #0]
 	timer0_flag = 0;
 80002c8:	4b04      	ldr	r3, [pc, #16]	; (80002dc <setTimer0+0x28>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 }
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr
 80002d8:	20000060 	.word	0x20000060
 80002dc:	2000006c 	.word	0x2000006c

080002e0 <setBlink0>:

 void setBlink0 ( int duration ) {
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 	blink_counter = duration / TIMER_CYCLE ;
 80002e8:	220a      	movs	r2, #10
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80002f0:	4a04      	ldr	r2, [pc, #16]	; (8000304 <setBlink0+0x24>)
 80002f2:	6013      	str	r3, [r2, #0]
 	blink_flag = 0;
 80002f4:	4b04      	ldr	r3, [pc, #16]	; (8000308 <setBlink0+0x28>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 }
 80002fa:	bf00      	nop
 80002fc:	370c      	adds	r7, #12
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	20000064 	.word	0x20000064
 8000308:	20000070 	.word	0x20000070

0800030c <timer_run>:

 void timer_run() {
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

  	if( timer0_counter > 0) {
 8000310:	4b1c      	ldr	r3, [pc, #112]	; (8000384 <timer_run+0x78>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	dd0e      	ble.n	8000336 <timer_run+0x2a>
  		timer0_counter--;
 8000318:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <timer_run+0x78>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	3b01      	subs	r3, #1
 800031e:	4a19      	ldr	r2, [pc, #100]	; (8000384 <timer_run+0x78>)
 8000320:	6013      	str	r3, [r2, #0]
  		if( timer0_counter == 0) timer0_flag = 1;
 8000322:	4b18      	ldr	r3, [pc, #96]	; (8000384 <timer_run+0x78>)
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d103      	bne.n	8000332 <timer_run+0x26>
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <timer_run+0x7c>)
 800032c:	2201      	movs	r2, #1
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	e001      	b.n	8000336 <timer_run+0x2a>
  		else {
  			 transport_light_led_driver();
 8000332:	f000 fe3b 	bl	8000fac <transport_light_led_driver>
  		}
  	}

  	if( switch_counter > 0) {
 8000336:	4b15      	ldr	r3, [pc, #84]	; (800038c <timer_run+0x80>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	dd0b      	ble.n	8000356 <timer_run+0x4a>
  		switch_counter--;
 800033e:	4b13      	ldr	r3, [pc, #76]	; (800038c <timer_run+0x80>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	3b01      	subs	r3, #1
 8000344:	4a11      	ldr	r2, [pc, #68]	; (800038c <timer_run+0x80>)
 8000346:	6013      	str	r3, [r2, #0]
  			if( switch_counter == 0) switch_flag = 1;
 8000348:	4b10      	ldr	r3, [pc, #64]	; (800038c <timer_run+0x80>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d102      	bne.n	8000356 <timer_run+0x4a>
 8000350:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <timer_run+0x84>)
 8000352:	2201      	movs	r2, #1
 8000354:	601a      	str	r2, [r3, #0]
  	}

  	if( blink_counter > 0 && modeState != MODE1) {
 8000356:	4b0f      	ldr	r3, [pc, #60]	; (8000394 <timer_run+0x88>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	2b00      	cmp	r3, #0
 800035c:	dd0f      	ble.n	800037e <timer_run+0x72>
 800035e:	4b0e      	ldr	r3, [pc, #56]	; (8000398 <timer_run+0x8c>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	2b01      	cmp	r3, #1
 8000364:	d00b      	beq.n	800037e <timer_run+0x72>
  		blink_counter--;
 8000366:	4b0b      	ldr	r3, [pc, #44]	; (8000394 <timer_run+0x88>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	3b01      	subs	r3, #1
 800036c:	4a09      	ldr	r2, [pc, #36]	; (8000394 <timer_run+0x88>)
 800036e:	6013      	str	r3, [r2, #0]
  			if( blink_counter == 0) blink_flag = 1;
 8000370:	4b08      	ldr	r3, [pc, #32]	; (8000394 <timer_run+0x88>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d102      	bne.n	800037e <timer_run+0x72>
 8000378:	4b08      	ldr	r3, [pc, #32]	; (800039c <timer_run+0x90>)
 800037a:	2201      	movs	r2, #1
 800037c:	601a      	str	r2, [r3, #0]
  	}

  }
 800037e:	bf00      	nop
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	20000060 	.word	0x20000060
 8000388:	2000006c 	.word	0x2000006c
 800038c:	2000005c 	.word	0x2000005c
 8000390:	20000068 	.word	0x20000068
 8000394:	20000064 	.word	0x20000064
 8000398:	2000007d 	.word	0x2000007d
 800039c:	20000070 	.word	0x20000070

080003a0 <update_7SEG_buffer>:
//  		blink_counter--;
//  			if( blink_counter == 0) blink_flag = 1;
//  	}
//  }

 void update_7SEG_buffer(enum ModeState mode){
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
	 switch(mode){
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	2b04      	cmp	r3, #4
 80003ae:	f200 80a1 	bhi.w	80004f4 <update_7SEG_buffer+0x154>
 80003b2:	a201      	add	r2, pc, #4	; (adr r2, 80003b8 <update_7SEG_buffer+0x18>)
 80003b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003b8:	080004f3 	.word	0x080004f3
 80003bc:	080003cd 	.word	0x080003cd
 80003c0:	08000433 	.word	0x08000433
 80003c4:	08000473 	.word	0x08000473
 80003c8:	080004b3 	.word	0x080004b3
	 case INIT:

		 	break;
	 case MODE1:
		 	led_buffer[0] = value1/10;
 80003cc:	4b4c      	ldr	r3, [pc, #304]	; (8000500 <update_7SEG_buffer+0x160>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a4c      	ldr	r2, [pc, #304]	; (8000504 <update_7SEG_buffer+0x164>)
 80003d2:	fb82 1203 	smull	r1, r2, r2, r3
 80003d6:	1092      	asrs	r2, r2, #2
 80003d8:	17db      	asrs	r3, r3, #31
 80003da:	1ad3      	subs	r3, r2, r3
 80003dc:	4a4a      	ldr	r2, [pc, #296]	; (8000508 <update_7SEG_buffer+0x168>)
 80003de:	6013      	str	r3, [r2, #0]
		 	led_buffer[1] = value1%10;
 80003e0:	4b47      	ldr	r3, [pc, #284]	; (8000500 <update_7SEG_buffer+0x160>)
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	4b47      	ldr	r3, [pc, #284]	; (8000504 <update_7SEG_buffer+0x164>)
 80003e6:	fb83 2301 	smull	r2, r3, r3, r1
 80003ea:	109a      	asrs	r2, r3, #2
 80003ec:	17cb      	asrs	r3, r1, #31
 80003ee:	1ad2      	subs	r2, r2, r3
 80003f0:	4613      	mov	r3, r2
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	4413      	add	r3, r2
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	1aca      	subs	r2, r1, r3
 80003fa:	4b43      	ldr	r3, [pc, #268]	; (8000508 <update_7SEG_buffer+0x168>)
 80003fc:	605a      	str	r2, [r3, #4]
		 	led_buffer[2] = value2/10;
 80003fe:	4b43      	ldr	r3, [pc, #268]	; (800050c <update_7SEG_buffer+0x16c>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	4a40      	ldr	r2, [pc, #256]	; (8000504 <update_7SEG_buffer+0x164>)
 8000404:	fb82 1203 	smull	r1, r2, r2, r3
 8000408:	1092      	asrs	r2, r2, #2
 800040a:	17db      	asrs	r3, r3, #31
 800040c:	1ad3      	subs	r3, r2, r3
 800040e:	4a3e      	ldr	r2, [pc, #248]	; (8000508 <update_7SEG_buffer+0x168>)
 8000410:	6093      	str	r3, [r2, #8]
		 	led_buffer[3] = value2%10;
 8000412:	4b3e      	ldr	r3, [pc, #248]	; (800050c <update_7SEG_buffer+0x16c>)
 8000414:	6819      	ldr	r1, [r3, #0]
 8000416:	4b3b      	ldr	r3, [pc, #236]	; (8000504 <update_7SEG_buffer+0x164>)
 8000418:	fb83 2301 	smull	r2, r3, r3, r1
 800041c:	109a      	asrs	r2, r3, #2
 800041e:	17cb      	asrs	r3, r1, #31
 8000420:	1ad2      	subs	r2, r2, r3
 8000422:	4613      	mov	r3, r2
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	4413      	add	r3, r2
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	1aca      	subs	r2, r1, r3
 800042c:	4b36      	ldr	r3, [pc, #216]	; (8000508 <update_7SEG_buffer+0x168>)
 800042e:	60da      	str	r2, [r3, #12]
		 	break;
 8000430:	e060      	b.n	80004f4 <update_7SEG_buffer+0x154>
	 case MODE2:
		 	led_buffer[0] = 0;
 8000432:	4b35      	ldr	r3, [pc, #212]	; (8000508 <update_7SEG_buffer+0x168>)
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
		 	led_buffer[1] = 2;
 8000438:	4b33      	ldr	r3, [pc, #204]	; (8000508 <update_7SEG_buffer+0x168>)
 800043a:	2202      	movs	r2, #2
 800043c:	605a      	str	r2, [r3, #4]
		 	led_buffer[2] = TRAFFIC_LIGHT_MAX_TEMP[0]/10;
 800043e:	4b34      	ldr	r3, [pc, #208]	; (8000510 <update_7SEG_buffer+0x170>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a30      	ldr	r2, [pc, #192]	; (8000504 <update_7SEG_buffer+0x164>)
 8000444:	fb82 1203 	smull	r1, r2, r2, r3
 8000448:	1092      	asrs	r2, r2, #2
 800044a:	17db      	asrs	r3, r3, #31
 800044c:	1ad3      	subs	r3, r2, r3
 800044e:	4a2e      	ldr	r2, [pc, #184]	; (8000508 <update_7SEG_buffer+0x168>)
 8000450:	6093      	str	r3, [r2, #8]
		 	led_buffer[3] = TRAFFIC_LIGHT_MAX_TEMP[0]%10;
 8000452:	4b2f      	ldr	r3, [pc, #188]	; (8000510 <update_7SEG_buffer+0x170>)
 8000454:	6819      	ldr	r1, [r3, #0]
 8000456:	4b2b      	ldr	r3, [pc, #172]	; (8000504 <update_7SEG_buffer+0x164>)
 8000458:	fb83 2301 	smull	r2, r3, r3, r1
 800045c:	109a      	asrs	r2, r3, #2
 800045e:	17cb      	asrs	r3, r1, #31
 8000460:	1ad2      	subs	r2, r2, r3
 8000462:	4613      	mov	r3, r2
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	4413      	add	r3, r2
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	1aca      	subs	r2, r1, r3
 800046c:	4b26      	ldr	r3, [pc, #152]	; (8000508 <update_7SEG_buffer+0x168>)
 800046e:	60da      	str	r2, [r3, #12]
		 	break;
 8000470:	e040      	b.n	80004f4 <update_7SEG_buffer+0x154>
	 case MODE3:
	 		 	led_buffer[0] = 0;
 8000472:	4b25      	ldr	r3, [pc, #148]	; (8000508 <update_7SEG_buffer+0x168>)
 8000474:	2200      	movs	r2, #0
 8000476:	601a      	str	r2, [r3, #0]
	 		 	led_buffer[1] = 3;
 8000478:	4b23      	ldr	r3, [pc, #140]	; (8000508 <update_7SEG_buffer+0x168>)
 800047a:	2203      	movs	r2, #3
 800047c:	605a      	str	r2, [r3, #4]
	 		 	led_buffer[2] = TRAFFIC_LIGHT_MAX_TEMP[2]/10;
 800047e:	4b24      	ldr	r3, [pc, #144]	; (8000510 <update_7SEG_buffer+0x170>)
 8000480:	689b      	ldr	r3, [r3, #8]
 8000482:	4a20      	ldr	r2, [pc, #128]	; (8000504 <update_7SEG_buffer+0x164>)
 8000484:	fb82 1203 	smull	r1, r2, r2, r3
 8000488:	1092      	asrs	r2, r2, #2
 800048a:	17db      	asrs	r3, r3, #31
 800048c:	1ad3      	subs	r3, r2, r3
 800048e:	4a1e      	ldr	r2, [pc, #120]	; (8000508 <update_7SEG_buffer+0x168>)
 8000490:	6093      	str	r3, [r2, #8]
	 		 	led_buffer[3] = TRAFFIC_LIGHT_MAX_TEMP[2]%10;
 8000492:	4b1f      	ldr	r3, [pc, #124]	; (8000510 <update_7SEG_buffer+0x170>)
 8000494:	6899      	ldr	r1, [r3, #8]
 8000496:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <update_7SEG_buffer+0x164>)
 8000498:	fb83 2301 	smull	r2, r3, r3, r1
 800049c:	109a      	asrs	r2, r3, #2
 800049e:	17cb      	asrs	r3, r1, #31
 80004a0:	1ad2      	subs	r2, r2, r3
 80004a2:	4613      	mov	r3, r2
 80004a4:	009b      	lsls	r3, r3, #2
 80004a6:	4413      	add	r3, r2
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	1aca      	subs	r2, r1, r3
 80004ac:	4b16      	ldr	r3, [pc, #88]	; (8000508 <update_7SEG_buffer+0x168>)
 80004ae:	60da      	str	r2, [r3, #12]
	 		 	break;
 80004b0:	e020      	b.n	80004f4 <update_7SEG_buffer+0x154>
	 case MODE4:
	 		 	led_buffer[0] = 0;
 80004b2:	4b15      	ldr	r3, [pc, #84]	; (8000508 <update_7SEG_buffer+0x168>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
	 		 	led_buffer[1] = 4;
 80004b8:	4b13      	ldr	r3, [pc, #76]	; (8000508 <update_7SEG_buffer+0x168>)
 80004ba:	2204      	movs	r2, #4
 80004bc:	605a      	str	r2, [r3, #4]
	 		 	led_buffer[2] = TRAFFIC_LIGHT_MAX_TEMP[1]/10;
 80004be:	4b14      	ldr	r3, [pc, #80]	; (8000510 <update_7SEG_buffer+0x170>)
 80004c0:	685b      	ldr	r3, [r3, #4]
 80004c2:	4a10      	ldr	r2, [pc, #64]	; (8000504 <update_7SEG_buffer+0x164>)
 80004c4:	fb82 1203 	smull	r1, r2, r2, r3
 80004c8:	1092      	asrs	r2, r2, #2
 80004ca:	17db      	asrs	r3, r3, #31
 80004cc:	1ad3      	subs	r3, r2, r3
 80004ce:	4a0e      	ldr	r2, [pc, #56]	; (8000508 <update_7SEG_buffer+0x168>)
 80004d0:	6093      	str	r3, [r2, #8]
	 		 	led_buffer[3] = TRAFFIC_LIGHT_MAX_TEMP[1]%10;
 80004d2:	4b0f      	ldr	r3, [pc, #60]	; (8000510 <update_7SEG_buffer+0x170>)
 80004d4:	6859      	ldr	r1, [r3, #4]
 80004d6:	4b0b      	ldr	r3, [pc, #44]	; (8000504 <update_7SEG_buffer+0x164>)
 80004d8:	fb83 2301 	smull	r2, r3, r3, r1
 80004dc:	109a      	asrs	r2, r3, #2
 80004de:	17cb      	asrs	r3, r1, #31
 80004e0:	1ad2      	subs	r2, r2, r3
 80004e2:	4613      	mov	r3, r2
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	4413      	add	r3, r2
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	1aca      	subs	r2, r1, r3
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <update_7SEG_buffer+0x168>)
 80004ee:	60da      	str	r2, [r3, #12]
	 		 	break;
 80004f0:	e000      	b.n	80004f4 <update_7SEG_buffer+0x154>
		 	break;
 80004f2:	bf00      	nop
	 }
 }
 80004f4:	bf00      	nop
 80004f6:	370c      	adds	r7, #12
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bc80      	pop	{r7}
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000074 	.word	0x20000074
 8000504:	66666667 	.word	0x66666667
 8000508:	20000080 	.word	0x20000080
 800050c:	20000078 	.word	0x20000078
 8000510:	2000000c 	.word	0x2000000c

08000514 <fsm_for_input_processing>:
// 	led_buffer[3] = TRAFFIC_LIGHT_MAX[0]%10;
// }



 void fsm_for_input_processing ( void ) {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0



	 switch ( modeState ){
 8000518:	4ba2      	ldr	r3, [pc, #648]	; (80007a4 <fsm_for_input_processing+0x290>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b04      	cmp	r3, #4
 800051e:	f200 8260 	bhi.w	80009e2 <fsm_for_input_processing+0x4ce>
 8000522:	a201      	add	r2, pc, #4	; (adr r2, 8000528 <fsm_for_input_processing+0x14>)
 8000524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000528:	0800053d 	.word	0x0800053d
 800052c:	0800059b 	.word	0x0800059b
 8000530:	080006bf 	.word	0x080006bf
 8000534:	080007dd 	.word	0x080007dd
 8000538:	080008c3 	.word	0x080008c3
	 	 case INIT :
	 		 modeState = MODE1 ;  // change mode state
 800053c:	4b99      	ldr	r3, [pc, #612]	; (80007a4 <fsm_for_input_processing+0x290>)
 800053e:	2201      	movs	r2, #1
 8000540:	701a      	strb	r2, [r3, #0]
	 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2180      	movs	r1, #128	; 0x80
 8000546:	4898      	ldr	r0, [pc, #608]	; (80007a8 <fsm_for_input_processing+0x294>)
 8000548:	f001 f95b 	bl	8001802 <HAL_GPIO_WritePin>

	 		 //set up for 1st group of traffic lights
	 		 value1 = TRAFFIC_LIGHT_MAX[state1];
 800054c:	4b97      	ldr	r3, [pc, #604]	; (80007ac <fsm_for_input_processing+0x298>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	461a      	mov	r2, r3
 8000552:	4b97      	ldr	r3, [pc, #604]	; (80007b0 <fsm_for_input_processing+0x29c>)
 8000554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000558:	4a96      	ldr	r2, [pc, #600]	; (80007b4 <fsm_for_input_processing+0x2a0>)
 800055a:	6013      	str	r3, [r2, #0]
	 		 update_light_led_buffer(state1, 0);
 800055c:	4b93      	ldr	r3, [pc, #588]	; (80007ac <fsm_for_input_processing+0x298>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f000 fd08 	bl	8000f78 <update_light_led_buffer>

	 		 //set up for 2nd group of traffic lights
	 		 value2 = TRAFFIC_LIGHT_MAX[state2];
 8000568:	4b93      	ldr	r3, [pc, #588]	; (80007b8 <fsm_for_input_processing+0x2a4>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	461a      	mov	r2, r3
 800056e:	4b90      	ldr	r3, [pc, #576]	; (80007b0 <fsm_for_input_processing+0x29c>)
 8000570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000574:	4a91      	ldr	r2, [pc, #580]	; (80007bc <fsm_for_input_processing+0x2a8>)
 8000576:	6013      	str	r3, [r2, #0]
	 		 update_light_led_buffer(state2, 1);
 8000578:	4b8f      	ldr	r3, [pc, #572]	; (80007b8 <fsm_for_input_processing+0x2a4>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2101      	movs	r1, #1
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fcfa 	bl	8000f78 <update_light_led_buffer>
	 		 update_7SEG_buffer(MODE1);
 8000584:	2001      	movs	r0, #1
 8000586:	f7ff ff0b 	bl	80003a0 <update_7SEG_buffer>

	 		 //set timer
	 		 setSwitch0 (100);
 800058a:	2064      	movs	r0, #100	; 0x64
 800058c:	f7ff fe7c 	bl	8000288 <setSwitch0>
	 		 setTimer0 (1000);
 8000590:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000594:	f7ff fe8e 	bl	80002b4 <setTimer0>
	 		 break;
 8000598:	e223      	b.n	80009e2 <fsm_for_input_processing+0x4ce>


		 case MODE1 :
			 if( !is_button_pressed (0) ) {
 800059a:	2000      	movs	r0, #0
 800059c:	f000 faaa 	bl	8000af4 <is_button_pressed>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d171      	bne.n	800068a <fsm_for_input_processing+0x176>
				 // INCREASE VALUE OF PORT A BY ONE UNIT
				 if(timer0_flag) { //update traffic light value every 1000ms
 80005a6:	4b86      	ldr	r3, [pc, #536]	; (80007c0 <fsm_for_input_processing+0x2ac>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d052      	beq.n	8000654 <fsm_for_input_processing+0x140>

					  value1--;
 80005ae:	4b81      	ldr	r3, [pc, #516]	; (80007b4 <fsm_for_input_processing+0x2a0>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	3b01      	subs	r3, #1
 80005b4:	4a7f      	ldr	r2, [pc, #508]	; (80007b4 <fsm_for_input_processing+0x2a0>)
 80005b6:	6013      	str	r3, [r2, #0]
					  value2--;
 80005b8:	4b80      	ldr	r3, [pc, #512]	; (80007bc <fsm_for_input_processing+0x2a8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3b01      	subs	r3, #1
 80005be:	4a7f      	ldr	r2, [pc, #508]	; (80007bc <fsm_for_input_processing+0x2a8>)
 80005c0:	6013      	str	r3, [r2, #0]
					  if(!value1) {
 80005c2:	4b7c      	ldr	r3, [pc, #496]	; (80007b4 <fsm_for_input_processing+0x2a0>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d11c      	bne.n	8000604 <fsm_for_input_processing+0xf0>
						  state1 = (state1+1)%3;
 80005ca:	4b78      	ldr	r3, [pc, #480]	; (80007ac <fsm_for_input_processing+0x298>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	1c5a      	adds	r2, r3, #1
 80005d0:	4b7c      	ldr	r3, [pc, #496]	; (80007c4 <fsm_for_input_processing+0x2b0>)
 80005d2:	fb83 3102 	smull	r3, r1, r3, r2
 80005d6:	17d3      	asrs	r3, r2, #31
 80005d8:	1ac9      	subs	r1, r1, r3
 80005da:	460b      	mov	r3, r1
 80005dc:	005b      	lsls	r3, r3, #1
 80005de:	440b      	add	r3, r1
 80005e0:	1ad1      	subs	r1, r2, r3
 80005e2:	b2ca      	uxtb	r2, r1
 80005e4:	4b71      	ldr	r3, [pc, #452]	; (80007ac <fsm_for_input_processing+0x298>)
 80005e6:	701a      	strb	r2, [r3, #0]
						  value1 = TRAFFIC_LIGHT_MAX[state1];
 80005e8:	4b70      	ldr	r3, [pc, #448]	; (80007ac <fsm_for_input_processing+0x298>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	4b70      	ldr	r3, [pc, #448]	; (80007b0 <fsm_for_input_processing+0x29c>)
 80005f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005f4:	4a6f      	ldr	r2, [pc, #444]	; (80007b4 <fsm_for_input_processing+0x2a0>)
 80005f6:	6013      	str	r3, [r2, #0]
						  update_light_led_buffer(state1, 0);
 80005f8:	4b6c      	ldr	r3, [pc, #432]	; (80007ac <fsm_for_input_processing+0x298>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f000 fcba 	bl	8000f78 <update_light_led_buffer>

					  }
					  if(!value2) {
 8000604:	4b6d      	ldr	r3, [pc, #436]	; (80007bc <fsm_for_input_processing+0x2a8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d11c      	bne.n	8000646 <fsm_for_input_processing+0x132>
						  state2 = (state2+1)%3;
 800060c:	4b6a      	ldr	r3, [pc, #424]	; (80007b8 <fsm_for_input_processing+0x2a4>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	1c5a      	adds	r2, r3, #1
 8000612:	4b6c      	ldr	r3, [pc, #432]	; (80007c4 <fsm_for_input_processing+0x2b0>)
 8000614:	fb83 3102 	smull	r3, r1, r3, r2
 8000618:	17d3      	asrs	r3, r2, #31
 800061a:	1ac9      	subs	r1, r1, r3
 800061c:	460b      	mov	r3, r1
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	440b      	add	r3, r1
 8000622:	1ad1      	subs	r1, r2, r3
 8000624:	b2ca      	uxtb	r2, r1
 8000626:	4b64      	ldr	r3, [pc, #400]	; (80007b8 <fsm_for_input_processing+0x2a4>)
 8000628:	701a      	strb	r2, [r3, #0]
						  value2 = TRAFFIC_LIGHT_MAX[state2];
 800062a:	4b63      	ldr	r3, [pc, #396]	; (80007b8 <fsm_for_input_processing+0x2a4>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	461a      	mov	r2, r3
 8000630:	4b5f      	ldr	r3, [pc, #380]	; (80007b0 <fsm_for_input_processing+0x29c>)
 8000632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000636:	4a61      	ldr	r2, [pc, #388]	; (80007bc <fsm_for_input_processing+0x2a8>)
 8000638:	6013      	str	r3, [r2, #0]
						  update_light_led_buffer(state2, 1);
 800063a:	4b5f      	ldr	r3, [pc, #380]	; (80007b8 <fsm_for_input_processing+0x2a4>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2101      	movs	r1, #1
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fc99 	bl	8000f78 <update_light_led_buffer>

					  }
					  update_7SEG_buffer(MODE1);
 8000646:	2001      	movs	r0, #1
 8000648:	f7ff feaa 	bl	80003a0 <update_7SEG_buffer>
					  setTimer0 (1000);
 800064c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000650:	f7ff fe30 	bl	80002b4 <setTimer0>
				 }

				if(switch_flag){ //change led and update display value every 250ms
 8000654:	4b5c      	ldr	r3, [pc, #368]	; (80007c8 <fsm_for_input_processing+0x2b4>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	f000 81bb 	beq.w	80009d4 <fsm_for_input_processing+0x4c0>

					   	  	  		update7SEG (index_led);
 800065e:	4b5b      	ldr	r3, [pc, #364]	; (80007cc <fsm_for_input_processing+0x2b8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff fd72 	bl	800014c <update7SEG>
					   	  	  		if(index_led==3) index_led=0;
 8000668:	4b58      	ldr	r3, [pc, #352]	; (80007cc <fsm_for_input_processing+0x2b8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b03      	cmp	r3, #3
 800066e:	d103      	bne.n	8000678 <fsm_for_input_processing+0x164>
 8000670:	4b56      	ldr	r3, [pc, #344]	; (80007cc <fsm_for_input_processing+0x2b8>)
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	e004      	b.n	8000682 <fsm_for_input_processing+0x16e>
					   	  	  		else index_led++;
 8000678:	4b54      	ldr	r3, [pc, #336]	; (80007cc <fsm_for_input_processing+0x2b8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3301      	adds	r3, #1
 800067e:	4a53      	ldr	r2, [pc, #332]	; (80007cc <fsm_for_input_processing+0x2b8>)
 8000680:	6013      	str	r3, [r2, #0]
					   	  	  		setSwitch0 (250);
 8000682:	20fa      	movs	r0, #250	; 0xfa
 8000684:	f7ff fe00 	bl	8000288 <setSwitch0>
				 update_7SEG_buffer(MODE2);
				 setBlink0 (500);


			 }
			 break ;
 8000688:	e1a4      	b.n	80009d4 <fsm_for_input_processing+0x4c0>
				 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800068a:	2180      	movs	r1, #128	; 0x80
 800068c:	4846      	ldr	r0, [pc, #280]	; (80007a8 <fsm_for_input_processing+0x294>)
 800068e:	f001 f8d0 	bl	8001832 <HAL_GPIO_TogglePin>
				 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_5, RESET ) ;
 8000692:	2200      	movs	r2, #0
 8000694:	2120      	movs	r1, #32
 8000696:	484e      	ldr	r0, [pc, #312]	; (80007d0 <fsm_for_input_processing+0x2bc>)
 8000698:	f001 f8b3 	bl	8001802 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_8, RESET ) ;
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a2:	484b      	ldr	r0, [pc, #300]	; (80007d0 <fsm_for_input_processing+0x2bc>)
 80006a4:	f001 f8ad 	bl	8001802 <HAL_GPIO_WritePin>
				 modeState = MODE2 ;
 80006a8:	4b3e      	ldr	r3, [pc, #248]	; (80007a4 <fsm_for_input_processing+0x290>)
 80006aa:	2202      	movs	r2, #2
 80006ac:	701a      	strb	r2, [r3, #0]
				 update_7SEG_buffer(MODE2);
 80006ae:	2002      	movs	r0, #2
 80006b0:	f7ff fe76 	bl	80003a0 <update_7SEG_buffer>
				 setBlink0 (500);
 80006b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006b8:	f7ff fe12 	bl	80002e0 <setBlink0>
			 break ;
 80006bc:	e18a      	b.n	80009d4 <fsm_for_input_processing+0x4c0>
		 case MODE2 :
			 if (! is_button_pressed (0) ) {
 80006be:	2000      	movs	r0, #0
 80006c0:	f000 fa18 	bl	8000af4 <is_button_pressed>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d152      	bne.n	8000770 <fsm_for_input_processing+0x25c>

				 if ( is_button_pressed (1) ) {
 80006ca:	2001      	movs	r0, #1
 80006cc:	f000 fa12 	bl	8000af4 <is_button_pressed>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d012      	beq.n	80006fc <fsm_for_input_processing+0x1e8>
					 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80006d6:	2180      	movs	r1, #128	; 0x80
 80006d8:	4833      	ldr	r0, [pc, #204]	; (80007a8 <fsm_for_input_processing+0x294>)
 80006da:	f001 f8aa 	bl	8001832 <HAL_GPIO_TogglePin>
					 TRAFFIC_LIGHT_MAX_TEMP[0]=TRAFFIC_LIGHT_MAX_TEMP[0]+1;
 80006de:	4b3d      	ldr	r3, [pc, #244]	; (80007d4 <fsm_for_input_processing+0x2c0>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	4a3b      	ldr	r2, [pc, #236]	; (80007d4 <fsm_for_input_processing+0x2c0>)
 80006e6:	6013      	str	r3, [r2, #0]
					 if (TRAFFIC_LIGHT_MAX_TEMP[0] > 99) TRAFFIC_LIGHT_MAX_TEMP[0] = 0;
 80006e8:	4b3a      	ldr	r3, [pc, #232]	; (80007d4 <fsm_for_input_processing+0x2c0>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b63      	cmp	r3, #99	; 0x63
 80006ee:	dd02      	ble.n	80006f6 <fsm_for_input_processing+0x1e2>
 80006f0:	4b38      	ldr	r3, [pc, #224]	; (80007d4 <fsm_for_input_processing+0x2c0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
					 update_7SEG_buffer(MODE2);
 80006f6:	2002      	movs	r0, #2
 80006f8:	f7ff fe52 	bl	80003a0 <update_7SEG_buffer>
				 }
				 if ( is_button_pressed (2) ) {
 80006fc:	2002      	movs	r0, #2
 80006fe:	f000 f9f9 	bl	8000af4 <is_button_pressed>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d00d      	beq.n	8000724 <fsm_for_input_processing+0x210>
					 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000708:	2180      	movs	r1, #128	; 0x80
 800070a:	4827      	ldr	r0, [pc, #156]	; (80007a8 <fsm_for_input_processing+0x294>)
 800070c:	f001 f891 	bl	8001832 <HAL_GPIO_TogglePin>
					 TRAFFIC_LIGHT_MAX[0] = TRAFFIC_LIGHT_MAX_TEMP[0];
 8000710:	4b30      	ldr	r3, [pc, #192]	; (80007d4 <fsm_for_input_processing+0x2c0>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a26      	ldr	r2, [pc, #152]	; (80007b0 <fsm_for_input_processing+0x29c>)
 8000716:	6013      	str	r3, [r2, #0]

					 modeState = MODE3;
 8000718:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <fsm_for_input_processing+0x290>)
 800071a:	2203      	movs	r2, #3
 800071c:	701a      	strb	r2, [r3, #0]
					 update_7SEG_buffer(MODE3);
 800071e:	2003      	movs	r0, #3
 8000720:	f7ff fe3e 	bl	80003a0 <update_7SEG_buffer>
					 //setTimer0 (1000);
				 }
				 if(blink_flag) { //blink red led every 500ms
 8000724:	4b2c      	ldr	r3, [pc, #176]	; (80007d8 <fsm_for_input_processing+0x2c4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d006      	beq.n	800073a <fsm_for_input_processing+0x226>
				 	  		  blinkLED(2);
 800072c:	2002      	movs	r0, #2
 800072e:	f000 fccf 	bl	80010d0 <blinkLED>
				 	  		  setBlink0 (500);
 8000732:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000736:	f7ff fdd3 	bl	80002e0 <setBlink0>
				}
				if(switch_flag){
 800073a:	4b23      	ldr	r3, [pc, #140]	; (80007c8 <fsm_for_input_processing+0x2b4>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	f000 814a 	beq.w	80009d8 <fsm_for_input_processing+0x4c4>

						   	  	  		update7SEG (index_led);
 8000744:	4b21      	ldr	r3, [pc, #132]	; (80007cc <fsm_for_input_processing+0x2b8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff fcff 	bl	800014c <update7SEG>
						   	  	  		if(index_led==3) index_led=0;
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <fsm_for_input_processing+0x2b8>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b03      	cmp	r3, #3
 8000754:	d103      	bne.n	800075e <fsm_for_input_processing+0x24a>
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <fsm_for_input_processing+0x2b8>)
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	e004      	b.n	8000768 <fsm_for_input_processing+0x254>
						   	  	  		else index_led++;
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <fsm_for_input_processing+0x2b8>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	3301      	adds	r3, #1
 8000764:	4a19      	ldr	r2, [pc, #100]	; (80007cc <fsm_for_input_processing+0x2b8>)
 8000766:	6013      	str	r3, [r2, #0]
						   	  	  		setSwitch0 (250);
 8000768:	20fa      	movs	r0, #250	; 0xfa
 800076a:	f7ff fd8d 	bl	8000288 <setSwitch0>
				 TRAFFIC_LIGHT_MAX_TEMP[0] = TRAFFIC_LIGHT_MAX[0];
				 modeState = MODE3 ;
				 update_7SEG_buffer(MODE3);
				 //setTimer0 (1000);
			 }
			 break ;
 800076e:	e133      	b.n	80009d8 <fsm_for_input_processing+0x4c4>
				 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	480d      	ldr	r0, [pc, #52]	; (80007a8 <fsm_for_input_processing+0x294>)
 8000774:	f001 f85d 	bl	8001832 <HAL_GPIO_TogglePin>
				 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_6, RESET ) ;
 8000778:	2200      	movs	r2, #0
 800077a:	2140      	movs	r1, #64	; 0x40
 800077c:	4814      	ldr	r0, [pc, #80]	; (80007d0 <fsm_for_input_processing+0x2bc>)
 800077e:	f001 f840 	bl	8001802 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_9, RESET ) ;
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000788:	4811      	ldr	r0, [pc, #68]	; (80007d0 <fsm_for_input_processing+0x2bc>)
 800078a:	f001 f83a 	bl	8001802 <HAL_GPIO_WritePin>
				 TRAFFIC_LIGHT_MAX_TEMP[0] = TRAFFIC_LIGHT_MAX[0];
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <fsm_for_input_processing+0x29c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a10      	ldr	r2, [pc, #64]	; (80007d4 <fsm_for_input_processing+0x2c0>)
 8000794:	6013      	str	r3, [r2, #0]
				 modeState = MODE3 ;
 8000796:	4b03      	ldr	r3, [pc, #12]	; (80007a4 <fsm_for_input_processing+0x290>)
 8000798:	2203      	movs	r2, #3
 800079a:	701a      	strb	r2, [r3, #0]
				 update_7SEG_buffer(MODE3);
 800079c:	2003      	movs	r0, #3
 800079e:	f7ff fdff 	bl	80003a0 <update_7SEG_buffer>
			 break ;
 80007a2:	e119      	b.n	80009d8 <fsm_for_input_processing+0x4c4>
 80007a4:	2000007d 	.word	0x2000007d
 80007a8:	40010c00 	.word	0x40010c00
 80007ac:	2000007c 	.word	0x2000007c
 80007b0:	20000000 	.word	0x20000000
 80007b4:	20000074 	.word	0x20000074
 80007b8:	20000018 	.word	0x20000018
 80007bc:	20000078 	.word	0x20000078
 80007c0:	2000006c 	.word	0x2000006c
 80007c4:	55555556 	.word	0x55555556
 80007c8:	20000068 	.word	0x20000068
 80007cc:	20000058 	.word	0x20000058
 80007d0:	40010800 	.word	0x40010800
 80007d4:	2000000c 	.word	0x2000000c
 80007d8:	20000070 	.word	0x20000070
		 case MODE3 :
			 if (! is_button_pressed (0) ) {
 80007dc:	2000      	movs	r0, #0
 80007de:	f000 f989 	bl	8000af4 <is_button_pressed>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d152      	bne.n	800088e <fsm_for_input_processing+0x37a>
				 if ( is_button_pressed (1) ) {
 80007e8:	2001      	movs	r0, #1
 80007ea:	f000 f983 	bl	8000af4 <is_button_pressed>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d012      	beq.n	800081a <fsm_for_input_processing+0x306>
					 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80007f4:	2180      	movs	r1, #128	; 0x80
 80007f6:	487c      	ldr	r0, [pc, #496]	; (80009e8 <fsm_for_input_processing+0x4d4>)
 80007f8:	f001 f81b 	bl	8001832 <HAL_GPIO_TogglePin>
					 TRAFFIC_LIGHT_MAX_TEMP[2]=TRAFFIC_LIGHT_MAX_TEMP[2]+1;
 80007fc:	4b7b      	ldr	r3, [pc, #492]	; (80009ec <fsm_for_input_processing+0x4d8>)
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	3301      	adds	r3, #1
 8000802:	4a7a      	ldr	r2, [pc, #488]	; (80009ec <fsm_for_input_processing+0x4d8>)
 8000804:	6093      	str	r3, [r2, #8]
					 if (TRAFFIC_LIGHT_MAX_TEMP[2] > 99) TRAFFIC_LIGHT_MAX_TEMP[2] = 0;
 8000806:	4b79      	ldr	r3, [pc, #484]	; (80009ec <fsm_for_input_processing+0x4d8>)
 8000808:	689b      	ldr	r3, [r3, #8]
 800080a:	2b63      	cmp	r3, #99	; 0x63
 800080c:	dd02      	ble.n	8000814 <fsm_for_input_processing+0x300>
 800080e:	4b77      	ldr	r3, [pc, #476]	; (80009ec <fsm_for_input_processing+0x4d8>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
					 update_7SEG_buffer(MODE3);
 8000814:	2003      	movs	r0, #3
 8000816:	f7ff fdc3 	bl	80003a0 <update_7SEG_buffer>
				 }
				 if ( is_button_pressed (2) ) {
 800081a:	2002      	movs	r0, #2
 800081c:	f000 f96a 	bl	8000af4 <is_button_pressed>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d00d      	beq.n	8000842 <fsm_for_input_processing+0x32e>
					 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000826:	2180      	movs	r1, #128	; 0x80
 8000828:	486f      	ldr	r0, [pc, #444]	; (80009e8 <fsm_for_input_processing+0x4d4>)
 800082a:	f001 f802 	bl	8001832 <HAL_GPIO_TogglePin>
					 TRAFFIC_LIGHT_MAX[2] = TRAFFIC_LIGHT_MAX_TEMP[2];
 800082e:	4b6f      	ldr	r3, [pc, #444]	; (80009ec <fsm_for_input_processing+0x4d8>)
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	4a6f      	ldr	r2, [pc, #444]	; (80009f0 <fsm_for_input_processing+0x4dc>)
 8000834:	6093      	str	r3, [r2, #8]

					 modeState = MODE4;
 8000836:	4b6f      	ldr	r3, [pc, #444]	; (80009f4 <fsm_for_input_processing+0x4e0>)
 8000838:	2204      	movs	r2, #4
 800083a:	701a      	strb	r2, [r3, #0]
					 update_7SEG_buffer(MODE4);
 800083c:	2004      	movs	r0, #4
 800083e:	f7ff fdaf 	bl	80003a0 <update_7SEG_buffer>
					 //setTimer0 (1000);
				 }
				 if(blink_flag) {
 8000842:	4b6d      	ldr	r3, [pc, #436]	; (80009f8 <fsm_for_input_processing+0x4e4>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d006      	beq.n	8000858 <fsm_for_input_processing+0x344>
				 	  		  blinkLED(3);
 800084a:	2003      	movs	r0, #3
 800084c:	f000 fc40 	bl	80010d0 <blinkLED>
				 	  		  setBlink0 (500);
 8000850:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000854:	f7ff fd44 	bl	80002e0 <setBlink0>
				}
				if(switch_flag){
 8000858:	4b68      	ldr	r3, [pc, #416]	; (80009fc <fsm_for_input_processing+0x4e8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	f000 80bd 	beq.w	80009dc <fsm_for_input_processing+0x4c8>

						   	  update7SEG (index_led);
 8000862:	4b67      	ldr	r3, [pc, #412]	; (8000a00 <fsm_for_input_processing+0x4ec>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fc70 	bl	800014c <update7SEG>
						   	  if(index_led==3) index_led=0;
 800086c:	4b64      	ldr	r3, [pc, #400]	; (8000a00 <fsm_for_input_processing+0x4ec>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b03      	cmp	r3, #3
 8000872:	d103      	bne.n	800087c <fsm_for_input_processing+0x368>
 8000874:	4b62      	ldr	r3, [pc, #392]	; (8000a00 <fsm_for_input_processing+0x4ec>)
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	e004      	b.n	8000886 <fsm_for_input_processing+0x372>
						   	  else index_led++;
 800087c:	4b60      	ldr	r3, [pc, #384]	; (8000a00 <fsm_for_input_processing+0x4ec>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	3301      	adds	r3, #1
 8000882:	4a5f      	ldr	r2, [pc, #380]	; (8000a00 <fsm_for_input_processing+0x4ec>)
 8000884:	6013      	str	r3, [r2, #0]
						   	  setSwitch0 (250);
 8000886:	20fa      	movs	r0, #250	; 0xfa
 8000888:	f7ff fcfe 	bl	8000288 <setSwitch0>
				 TRAFFIC_LIGHT_MAX_TEMP[2] = TRAFFIC_LIGHT_MAX[2];
				 modeState = MODE4 ;
				 update_7SEG_buffer(MODE4);
				 //setTimer0 (1000);
			 }
			 break ;
 800088c:	e0a6      	b.n	80009dc <fsm_for_input_processing+0x4c8>
				 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800088e:	2180      	movs	r1, #128	; 0x80
 8000890:	4855      	ldr	r0, [pc, #340]	; (80009e8 <fsm_for_input_processing+0x4d4>)
 8000892:	f000 ffce 	bl	8001832 <HAL_GPIO_TogglePin>
				 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_7, RESET ) ;
 8000896:	2200      	movs	r2, #0
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	485a      	ldr	r0, [pc, #360]	; (8000a04 <fsm_for_input_processing+0x4f0>)
 800089c:	f000 ffb1 	bl	8001802 <HAL_GPIO_WritePin>
				 HAL_GPIO_WritePin (GPIOA , GPIO_PIN_10, RESET ) ;
 80008a0:	2200      	movs	r2, #0
 80008a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a6:	4857      	ldr	r0, [pc, #348]	; (8000a04 <fsm_for_input_processing+0x4f0>)
 80008a8:	f000 ffab 	bl	8001802 <HAL_GPIO_WritePin>
				 TRAFFIC_LIGHT_MAX_TEMP[2] = TRAFFIC_LIGHT_MAX[2];
 80008ac:	4b50      	ldr	r3, [pc, #320]	; (80009f0 <fsm_for_input_processing+0x4dc>)
 80008ae:	689b      	ldr	r3, [r3, #8]
 80008b0:	4a4e      	ldr	r2, [pc, #312]	; (80009ec <fsm_for_input_processing+0x4d8>)
 80008b2:	6093      	str	r3, [r2, #8]
				 modeState = MODE4 ;
 80008b4:	4b4f      	ldr	r3, [pc, #316]	; (80009f4 <fsm_for_input_processing+0x4e0>)
 80008b6:	2204      	movs	r2, #4
 80008b8:	701a      	strb	r2, [r3, #0]
				 update_7SEG_buffer(MODE4);
 80008ba:	2004      	movs	r0, #4
 80008bc:	f7ff fd70 	bl	80003a0 <update_7SEG_buffer>
			 break ;
 80008c0:	e08c      	b.n	80009dc <fsm_for_input_processing+0x4c8>
		 case MODE4 :
			 if (! is_button_pressed (0) ) {
 80008c2:	2000      	movs	r0, #0
 80008c4:	f000 f916 	bl	8000af4 <is_button_pressed>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d151      	bne.n	8000972 <fsm_for_input_processing+0x45e>
				 if ( is_button_pressed (1) ) {
 80008ce:	2001      	movs	r0, #1
 80008d0:	f000 f910 	bl	8000af4 <is_button_pressed>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d012      	beq.n	8000900 <fsm_for_input_processing+0x3ec>
					 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80008da:	2180      	movs	r1, #128	; 0x80
 80008dc:	4842      	ldr	r0, [pc, #264]	; (80009e8 <fsm_for_input_processing+0x4d4>)
 80008de:	f000 ffa8 	bl	8001832 <HAL_GPIO_TogglePin>
					 TRAFFIC_LIGHT_MAX_TEMP[1]=TRAFFIC_LIGHT_MAX_TEMP[1]+1;
 80008e2:	4b42      	ldr	r3, [pc, #264]	; (80009ec <fsm_for_input_processing+0x4d8>)
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	3301      	adds	r3, #1
 80008e8:	4a40      	ldr	r2, [pc, #256]	; (80009ec <fsm_for_input_processing+0x4d8>)
 80008ea:	6053      	str	r3, [r2, #4]
					 if (TRAFFIC_LIGHT_MAX_TEMP[1] > 99) TRAFFIC_LIGHT_MAX_TEMP[1] = 0;
 80008ec:	4b3f      	ldr	r3, [pc, #252]	; (80009ec <fsm_for_input_processing+0x4d8>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	2b63      	cmp	r3, #99	; 0x63
 80008f2:	dd02      	ble.n	80008fa <fsm_for_input_processing+0x3e6>
 80008f4:	4b3d      	ldr	r3, [pc, #244]	; (80009ec <fsm_for_input_processing+0x4d8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	605a      	str	r2, [r3, #4]
					 update_7SEG_buffer(MODE4);
 80008fa:	2004      	movs	r0, #4
 80008fc:	f7ff fd50 	bl	80003a0 <update_7SEG_buffer>
				 }
				 if ( is_button_pressed (2) ) {
 8000900:	2002      	movs	r0, #2
 8000902:	f000 f8f7 	bl	8000af4 <is_button_pressed>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d00d      	beq.n	8000928 <fsm_for_input_processing+0x414>
					 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800090c:	2180      	movs	r1, #128	; 0x80
 800090e:	4836      	ldr	r0, [pc, #216]	; (80009e8 <fsm_for_input_processing+0x4d4>)
 8000910:	f000 ff8f 	bl	8001832 <HAL_GPIO_TogglePin>
					 TRAFFIC_LIGHT_MAX[1] = TRAFFIC_LIGHT_MAX_TEMP[1];
 8000914:	4b35      	ldr	r3, [pc, #212]	; (80009ec <fsm_for_input_processing+0x4d8>)
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	4a35      	ldr	r2, [pc, #212]	; (80009f0 <fsm_for_input_processing+0x4dc>)
 800091a:	6053      	str	r3, [r2, #4]

					 modeState = MODE1 ;
 800091c:	4b35      	ldr	r3, [pc, #212]	; (80009f4 <fsm_for_input_processing+0x4e0>)
 800091e:	2201      	movs	r2, #1
 8000920:	701a      	strb	r2, [r3, #0]
					 update_7SEG_buffer(MODE1);
 8000922:	2001      	movs	r0, #1
 8000924:	f7ff fd3c 	bl	80003a0 <update_7SEG_buffer>
					 //setTimer0 (1000);
				 }
				 if(blink_flag) {
 8000928:	4b33      	ldr	r3, [pc, #204]	; (80009f8 <fsm_for_input_processing+0x4e4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d006      	beq.n	800093e <fsm_for_input_processing+0x42a>
				 	  		  blinkLED(4);
 8000930:	2004      	movs	r0, #4
 8000932:	f000 fbcd 	bl	80010d0 <blinkLED>
				 	  		  setBlink0 (500);
 8000936:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800093a:	f7ff fcd1 	bl	80002e0 <setBlink0>
				}
				if(switch_flag){
 800093e:	4b2f      	ldr	r3, [pc, #188]	; (80009fc <fsm_for_input_processing+0x4e8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d04c      	beq.n	80009e0 <fsm_for_input_processing+0x4cc>

						   	  update7SEG (index_led);
 8000946:	4b2e      	ldr	r3, [pc, #184]	; (8000a00 <fsm_for_input_processing+0x4ec>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fbfe 	bl	800014c <update7SEG>
						   	  if(index_led==3) index_led=0;
 8000950:	4b2b      	ldr	r3, [pc, #172]	; (8000a00 <fsm_for_input_processing+0x4ec>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b03      	cmp	r3, #3
 8000956:	d103      	bne.n	8000960 <fsm_for_input_processing+0x44c>
 8000958:	4b29      	ldr	r3, [pc, #164]	; (8000a00 <fsm_for_input_processing+0x4ec>)
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	e004      	b.n	800096a <fsm_for_input_processing+0x456>
						   	  else index_led++;
 8000960:	4b27      	ldr	r3, [pc, #156]	; (8000a00 <fsm_for_input_processing+0x4ec>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	3301      	adds	r3, #1
 8000966:	4a26      	ldr	r2, [pc, #152]	; (8000a00 <fsm_for_input_processing+0x4ec>)
 8000968:	6013      	str	r3, [r2, #0]
						   	  setSwitch0 (250);
 800096a:	20fa      	movs	r0, #250	; 0xfa
 800096c:	f7ff fc8c 	bl	8000288 <setSwitch0>
		 		 value2 = TRAFFIC_LIGHT_MAX[state2];
		 		 update_light_led_buffer(state2, 1);
				 update_7SEG_buffer(MODE1);
				 //setTimer0 (1000);
			 }
		 	 break ;
 8000970:	e036      	b.n	80009e0 <fsm_for_input_processing+0x4cc>
				 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000972:	2180      	movs	r1, #128	; 0x80
 8000974:	481c      	ldr	r0, [pc, #112]	; (80009e8 <fsm_for_input_processing+0x4d4>)
 8000976:	f000 ff5c 	bl	8001832 <HAL_GPIO_TogglePin>
				 TRAFFIC_LIGHT_MAX_TEMP[1] = TRAFFIC_LIGHT_MAX[1];
 800097a:	4b1d      	ldr	r3, [pc, #116]	; (80009f0 <fsm_for_input_processing+0x4dc>)
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	4a1b      	ldr	r2, [pc, #108]	; (80009ec <fsm_for_input_processing+0x4d8>)
 8000980:	6053      	str	r3, [r2, #4]
				 modeState = MODE1 ;
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <fsm_for_input_processing+0x4e0>)
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
				 state1 = 0; //RED
 8000988:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <fsm_for_input_processing+0x4f4>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
		 		 value1 = TRAFFIC_LIGHT_MAX[state1];
 800098e:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <fsm_for_input_processing+0x4f4>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	4b16      	ldr	r3, [pc, #88]	; (80009f0 <fsm_for_input_processing+0x4dc>)
 8000996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800099a:	4a1c      	ldr	r2, [pc, #112]	; (8000a0c <fsm_for_input_processing+0x4f8>)
 800099c:	6013      	str	r3, [r2, #0]
		 		 update_light_led_buffer(state1, 0);
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <fsm_for_input_processing+0x4f4>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2100      	movs	r1, #0
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fae7 	bl	8000f78 <update_light_led_buffer>
		 		 state2 = 1; //GREEN
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <fsm_for_input_processing+0x4fc>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	701a      	strb	r2, [r3, #0]
		 		 value2 = TRAFFIC_LIGHT_MAX[state2];
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <fsm_for_input_processing+0x4fc>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <fsm_for_input_processing+0x4dc>)
 80009b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009bc:	4a15      	ldr	r2, [pc, #84]	; (8000a14 <fsm_for_input_processing+0x500>)
 80009be:	6013      	str	r3, [r2, #0]
		 		 update_light_led_buffer(state2, 1);
 80009c0:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <fsm_for_input_processing+0x4fc>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2101      	movs	r1, #1
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fad6 	bl	8000f78 <update_light_led_buffer>
				 update_7SEG_buffer(MODE1);
 80009cc:	2001      	movs	r0, #1
 80009ce:	f7ff fce7 	bl	80003a0 <update_7SEG_buffer>
		 	 break ;
 80009d2:	e005      	b.n	80009e0 <fsm_for_input_processing+0x4cc>
			 break ;
 80009d4:	bf00      	nop
 80009d6:	e004      	b.n	80009e2 <fsm_for_input_processing+0x4ce>
			 break ;
 80009d8:	bf00      	nop
 80009da:	e002      	b.n	80009e2 <fsm_for_input_processing+0x4ce>
			 break ;
 80009dc:	bf00      	nop
 80009de:	e000      	b.n	80009e2 <fsm_for_input_processing+0x4ce>
		 	 break ;
 80009e0:	bf00      	nop
	 }
 }
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40010c00 	.word	0x40010c00
 80009ec:	2000000c 	.word	0x2000000c
 80009f0:	20000000 	.word	0x20000000
 80009f4:	2000007d 	.word	0x2000007d
 80009f8:	20000070 	.word	0x20000070
 80009fc:	20000068 	.word	0x20000068
 8000a00:	20000058 	.word	0x20000058
 8000a04:	40010800 	.word	0x40010800
 8000a08:	2000007c 	.word	0x2000007c
 8000a0c:	20000074 	.word	0x20000074
 8000a10:	20000018 	.word	0x20000018
 8000a14:	20000078 	.word	0x20000078

08000a18 <readPin>:
// static uint8_t flagForButtonPress1s [ N0_OF_BUTTONS ];
 // we define counter for automatically increasing the value
 // after the button is pressed more than 1 second .
// static uint16_t counterForButtonPress1s [ N0_OF_BUTTONS ];

 GPIO_PinState readPin ( uint8_t n ) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]

	 switch(n){
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	d012      	beq.n	8000a4e <readPin+0x36>
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	dc16      	bgt.n	8000a5a <readPin+0x42>
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d002      	beq.n	8000a36 <readPin+0x1e>
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d006      	beq.n	8000a42 <readPin+0x2a>
 8000a34:	e011      	b.n	8000a5a <readPin+0x42>

	 case 0:
		 return HAL_GPIO_ReadPin (GPIOA , GPIO_PIN_1 ) ;
 8000a36:	2102      	movs	r1, #2
 8000a38:	480a      	ldr	r0, [pc, #40]	; (8000a64 <readPin+0x4c>)
 8000a3a:	f000 fecb 	bl	80017d4 <HAL_GPIO_ReadPin>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	e00c      	b.n	8000a5c <readPin+0x44>
	 case 1:
	 	 return HAL_GPIO_ReadPin (GPIOA , GPIO_PIN_2 ) ;
 8000a42:	2104      	movs	r1, #4
 8000a44:	4807      	ldr	r0, [pc, #28]	; (8000a64 <readPin+0x4c>)
 8000a46:	f000 fec5 	bl	80017d4 <HAL_GPIO_ReadPin>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	e006      	b.n	8000a5c <readPin+0x44>
	 case 2:
		 return HAL_GPIO_ReadPin (GPIOA , GPIO_PIN_3 );
 8000a4e:	2108      	movs	r1, #8
 8000a50:	4804      	ldr	r0, [pc, #16]	; (8000a64 <readPin+0x4c>)
 8000a52:	f000 febf 	bl	80017d4 <HAL_GPIO_ReadPin>
 8000a56:	4603      	mov	r3, r0
 8000a58:	e000      	b.n	8000a5c <readPin+0x44>

	 default:
	 	return 0;
 8000a5a:	2300      	movs	r3, #0
	 }

 }
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40010800 	.word	0x40010800

08000a68 <button_reading>:
 void button_reading ( void ) {
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
	 for ( uint8_t i = 0; i < N0_OF_BUTTONS ; i ++) {
 8000a6e:	2300      	movs	r3, #0
 8000a70:	71fb      	strb	r3, [r7, #7]
 8000a72:	e031      	b.n	8000ad8 <button_reading+0x70>
		 debounceButtonBuffer2 [ i ] = debounceButtonBuffer1 [ i ];
 8000a74:	79fa      	ldrb	r2, [r7, #7]
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	491b      	ldr	r1, [pc, #108]	; (8000ae8 <button_reading+0x80>)
 8000a7a:	5c89      	ldrb	r1, [r1, r2]
 8000a7c:	4a1b      	ldr	r2, [pc, #108]	; (8000aec <button_reading+0x84>)
 8000a7e:	54d1      	strb	r1, [r2, r3]
		 debounceButtonBuffer1 [ i ] = readPin (i) ;
 8000a80:	79fc      	ldrb	r4, [r7, #7]
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff ffc7 	bl	8000a18 <readPin>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b16      	ldr	r3, [pc, #88]	; (8000ae8 <button_reading+0x80>)
 8000a90:	551a      	strb	r2, [r3, r4]
		 if( debounceButtonBuffer1 [i] == debounceButtonBuffer2 [i]) {
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	4a14      	ldr	r2, [pc, #80]	; (8000ae8 <button_reading+0x80>)
 8000a96:	5cd2      	ldrb	r2, [r2, r3]
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	4914      	ldr	r1, [pc, #80]	; (8000aec <button_reading+0x84>)
 8000a9c:	5ccb      	ldrb	r3, [r1, r3]
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d117      	bne.n	8000ad2 <button_reading+0x6a>

			 if(debounceButtonBuffer1 [i] == READ_BUTTON_IS_PRESSED ){
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	4a10      	ldr	r2, [pc, #64]	; (8000ae8 <button_reading+0x80>)
 8000aa6:	5cd3      	ldrb	r3, [r2, r3]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d10e      	bne.n	8000aca <button_reading+0x62>

				 if(buttonBuffer [ i] == BUTTON_IS_HOLD)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <button_reading+0x88>)
 8000ab0:	5cd3      	ldrb	r3, [r2, r3]
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d104      	bne.n	8000ac0 <button_reading+0x58>
					 buttonBuffer [ i] = BUTTON_IS_HOLD;
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	4a0d      	ldr	r2, [pc, #52]	; (8000af0 <button_reading+0x88>)
 8000aba:	2102      	movs	r1, #2
 8000abc:	54d1      	strb	r1, [r2, r3]
 8000abe:	e008      	b.n	8000ad2 <button_reading+0x6a>
				 else
					 buttonBuffer [ i] = BUTTON_IS_PRESSED;
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	4a0b      	ldr	r2, [pc, #44]	; (8000af0 <button_reading+0x88>)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	54d1      	strb	r1, [r2, r3]
 8000ac8:	e003      	b.n	8000ad2 <button_reading+0x6a>

			 }
			 else {
				 buttonBuffer [ i] = BUTTON_IS_RELEASED;
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	4a08      	ldr	r2, [pc, #32]	; (8000af0 <button_reading+0x88>)
 8000ace:	2101      	movs	r1, #1
 8000ad0:	54d1      	strb	r1, [r2, r3]
	 for ( uint8_t i = 0; i < N0_OF_BUTTONS ; i ++) {
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	71fb      	strb	r3, [r7, #7]
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d9ca      	bls.n	8000a74 <button_reading+0xc>
//		 else {
//			 counterForButtonPress1s [i ] = 0;
//			 flagForButtonPress1s [i ] = 0;
//		 }
	 }
 }
 8000ade:	bf00      	nop
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd90      	pop	{r4, r7, pc}
 8000ae8:	20000090 	.word	0x20000090
 8000aec:	20000094 	.word	0x20000094
 8000af0:	2000001c 	.word	0x2000001c

08000af4 <is_button_pressed>:


unsigned char is_button_pressed ( uint8_t index ) {
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
 if( index >= N0_OF_BUTTONS ) return 0;
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	2b02      	cmp	r3, #2
 8000b02:	d901      	bls.n	8000b08 <is_button_pressed+0x14>
 8000b04:	2300      	movs	r3, #0
 8000b06:	e00b      	b.n	8000b20 <is_button_pressed+0x2c>
 if(buttonBuffer [ index ] == BUTTON_IS_PRESSED) {
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <is_button_pressed+0x38>)
 8000b0c:	5cd3      	ldrb	r3, [r2, r3]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d105      	bne.n	8000b1e <is_button_pressed+0x2a>
	 buttonBuffer [ index ] = BUTTON_IS_HOLD;
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <is_button_pressed+0x38>)
 8000b16:	2102      	movs	r1, #2
 8000b18:	54d1      	strb	r1, [r2, r3]
	 return 1;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	e000      	b.n	8000b20 <is_button_pressed+0x2c>
 }
 else return 0;
 8000b1e:	2300      	movs	r3, #0
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	2000001c 	.word	0x2000001c

08000b30 <display7SEG>:
//		HAL_GPIO_WritePin(SEVEN_SEGMENT_1_H_PORT, SEVEN_SEGMENT_1_H, RESET);
//	}

}

void display7SEG (int num){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	  uint8_t temp = sevenSegmentLEDConversion[num];
 8000b38:	4a3c      	ldr	r2, [pc, #240]	; (8000c2c <display7SEG+0xfc>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	73fb      	strb	r3, [r7, #15]
		if(temp & 0x01){ //what is the value of temp & 0x01 = 0x01 --> TRUE
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
 8000b44:	f003 0301 	and.w	r3, r3, #1
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d005      	beq.n	8000b58 <display7SEG+0x28>
			HAL_GPIO_WritePin(SEVEN_SEGMENT_1_A_PORT, SEVEN_SEGMENT_1_A, SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2101      	movs	r1, #1
 8000b50:	4837      	ldr	r0, [pc, #220]	; (8000c30 <display7SEG+0x100>)
 8000b52:	f000 fe56 	bl	8001802 <HAL_GPIO_WritePin>
 8000b56:	e004      	b.n	8000b62 <display7SEG+0x32>
		} else{
			HAL_GPIO_WritePin(SEVEN_SEGMENT_1_A_PORT, SEVEN_SEGMENT_1_A, RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	4834      	ldr	r0, [pc, #208]	; (8000c30 <display7SEG+0x100>)
 8000b5e:	f000 fe50 	bl	8001802 <HAL_GPIO_WritePin>
		}

		if(temp & 0x02){
 8000b62:	7bfb      	ldrb	r3, [r7, #15]
 8000b64:	f003 0302 	and.w	r3, r3, #2
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d005      	beq.n	8000b78 <display7SEG+0x48>
			HAL_GPIO_WritePin(SEVEN_SEGMENT_1_B_PORT, SEVEN_SEGMENT_1_B, SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2102      	movs	r1, #2
 8000b70:	482f      	ldr	r0, [pc, #188]	; (8000c30 <display7SEG+0x100>)
 8000b72:	f000 fe46 	bl	8001802 <HAL_GPIO_WritePin>
 8000b76:	e004      	b.n	8000b82 <display7SEG+0x52>
		} else{
			HAL_GPIO_WritePin(SEVEN_SEGMENT_1_B_PORT, SEVEN_SEGMENT_1_B, RESET);
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2102      	movs	r1, #2
 8000b7c:	482c      	ldr	r0, [pc, #176]	; (8000c30 <display7SEG+0x100>)
 8000b7e:	f000 fe40 	bl	8001802 <HAL_GPIO_WritePin>
		}

		if(temp & 0x04){
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d005      	beq.n	8000b98 <display7SEG+0x68>
			HAL_GPIO_WritePin(SEVEN_SEGMENT_1_C_PORT, SEVEN_SEGMENT_1_C, SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2104      	movs	r1, #4
 8000b90:	4827      	ldr	r0, [pc, #156]	; (8000c30 <display7SEG+0x100>)
 8000b92:	f000 fe36 	bl	8001802 <HAL_GPIO_WritePin>
 8000b96:	e004      	b.n	8000ba2 <display7SEG+0x72>
		} else{
			HAL_GPIO_WritePin(SEVEN_SEGMENT_1_C_PORT, SEVEN_SEGMENT_1_C, RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2104      	movs	r1, #4
 8000b9c:	4824      	ldr	r0, [pc, #144]	; (8000c30 <display7SEG+0x100>)
 8000b9e:	f000 fe30 	bl	8001802 <HAL_GPIO_WritePin>
		}

		if(temp & 0x08){
 8000ba2:	7bfb      	ldrb	r3, [r7, #15]
 8000ba4:	f003 0308 	and.w	r3, r3, #8
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d005      	beq.n	8000bb8 <display7SEG+0x88>
			HAL_GPIO_WritePin(SEVEN_SEGMENT_1_D_PORT, SEVEN_SEGMENT_1_D, SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	2108      	movs	r1, #8
 8000bb0:	481f      	ldr	r0, [pc, #124]	; (8000c30 <display7SEG+0x100>)
 8000bb2:	f000 fe26 	bl	8001802 <HAL_GPIO_WritePin>
 8000bb6:	e004      	b.n	8000bc2 <display7SEG+0x92>
		} else{
			HAL_GPIO_WritePin(SEVEN_SEGMENT_1_D_PORT, SEVEN_SEGMENT_1_D, RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2108      	movs	r1, #8
 8000bbc:	481c      	ldr	r0, [pc, #112]	; (8000c30 <display7SEG+0x100>)
 8000bbe:	f000 fe20 	bl	8001802 <HAL_GPIO_WritePin>
		}

		if(temp & 0x10){
 8000bc2:	7bfb      	ldrb	r3, [r7, #15]
 8000bc4:	f003 0310 	and.w	r3, r3, #16
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d005      	beq.n	8000bd8 <display7SEG+0xa8>
			HAL_GPIO_WritePin(SEVEN_SEGMENT_1_E_PORT, SEVEN_SEGMENT_1_E, SET);
 8000bcc:	2201      	movs	r2, #1
 8000bce:	2110      	movs	r1, #16
 8000bd0:	4817      	ldr	r0, [pc, #92]	; (8000c30 <display7SEG+0x100>)
 8000bd2:	f000 fe16 	bl	8001802 <HAL_GPIO_WritePin>
 8000bd6:	e004      	b.n	8000be2 <display7SEG+0xb2>
		} else{
			HAL_GPIO_WritePin(SEVEN_SEGMENT_1_E_PORT, SEVEN_SEGMENT_1_E, RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2110      	movs	r1, #16
 8000bdc:	4814      	ldr	r0, [pc, #80]	; (8000c30 <display7SEG+0x100>)
 8000bde:	f000 fe10 	bl	8001802 <HAL_GPIO_WritePin>
		}
	//
		if(temp & 0x20){
 8000be2:	7bfb      	ldrb	r3, [r7, #15]
 8000be4:	f003 0320 	and.w	r3, r3, #32
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d005      	beq.n	8000bf8 <display7SEG+0xc8>
			HAL_GPIO_WritePin(SEVEN_SEGMENT_1_F_PORT, SEVEN_SEGMENT_1_F, SET);
 8000bec:	2201      	movs	r2, #1
 8000bee:	2120      	movs	r1, #32
 8000bf0:	480f      	ldr	r0, [pc, #60]	; (8000c30 <display7SEG+0x100>)
 8000bf2:	f000 fe06 	bl	8001802 <HAL_GPIO_WritePin>
 8000bf6:	e004      	b.n	8000c02 <display7SEG+0xd2>
		} else{
			HAL_GPIO_WritePin(SEVEN_SEGMENT_1_F_PORT, SEVEN_SEGMENT_1_F, RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2120      	movs	r1, #32
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <display7SEG+0x100>)
 8000bfe:	f000 fe00 	bl	8001802 <HAL_GPIO_WritePin>
		}
	//	//temp = 0x3f
		if(temp & 0x40){ //true or false?
 8000c02:	7bfb      	ldrb	r3, [r7, #15]
 8000c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d005      	beq.n	8000c18 <display7SEG+0xe8>
	 		HAL_GPIO_WritePin(SEVEN_SEGMENT_1_G_PORT, SEVEN_SEGMENT_1_G, SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2140      	movs	r1, #64	; 0x40
 8000c10:	4807      	ldr	r0, [pc, #28]	; (8000c30 <display7SEG+0x100>)
 8000c12:	f000 fdf6 	bl	8001802 <HAL_GPIO_WritePin>
		} else{
			HAL_GPIO_WritePin(SEVEN_SEGMENT_1_G_PORT, SEVEN_SEGMENT_1_G, RESET);
		}
  }
 8000c16:	e004      	b.n	8000c22 <display7SEG+0xf2>
			HAL_GPIO_WritePin(SEVEN_SEGMENT_1_G_PORT, SEVEN_SEGMENT_1_G, RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2140      	movs	r1, #64	; 0x40
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <display7SEG+0x100>)
 8000c1e:	f000 fdf0 	bl	8001802 <HAL_GPIO_WritePin>
  }
 8000c22:	bf00      	nop
 8000c24:	3710      	adds	r7, #16
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000020 	.word	0x20000020
 8000c30:	40010c00 	.word	0x40010c00

08000c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c38:	f000 fae2 	bl	8001200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c3c:	f000 f80c 	bl	8000c58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c40:	f000 f892 	bl	8000d68 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c44:	f000 f844 	bl	8000cd0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <main+0x20>)
 8000c4a:	f001 fa43 	bl	80020d4 <HAL_TIM_Base_Start_IT>
  //Loop


  while(1){

	  fsm_for_input_processing () ;
 8000c4e:	f7ff fc61 	bl	8000514 <fsm_for_input_processing>
 8000c52:	e7fc      	b.n	8000c4e <main+0x1a>
 8000c54:	2000009c 	.word	0x2000009c

08000c58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b090      	sub	sp, #64	; 0x40
 8000c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c5e:	f107 0318 	add.w	r3, r7, #24
 8000c62:	2228      	movs	r2, #40	; 0x28
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 fdec 	bl	8002844 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c6c:	1d3b      	adds	r3, r7, #4
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c82:	2310      	movs	r3, #16
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8a:	f107 0318 	add.w	r3, r7, #24
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 fde8 	bl	8001864 <HAL_RCC_OscConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000c9a:	f000 f8c7 	bl	8000e2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c9e:	230f      	movs	r3, #15
 8000ca0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cb2:	1d3b      	adds	r3, r7, #4
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f001 f854 	bl	8001d64 <HAL_RCC_ClockConfig>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cc2:	f000 f8b3 	bl	8000e2c <Error_Handler>
  }
}
 8000cc6:	bf00      	nop
 8000cc8:	3740      	adds	r7, #64	; 0x40
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cec:	4b1d      	ldr	r3, [pc, #116]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000cee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000cf4:	4b1b      	ldr	r3, [pc, #108]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000cf6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000cfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b19      	ldr	r3, [pc, #100]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000d04:	2209      	movs	r2, #9
 8000d06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d08:	4b16      	ldr	r3, [pc, #88]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d14:	4813      	ldr	r0, [pc, #76]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000d16:	f001 f98d 	bl	8002034 <HAL_TIM_Base_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d20:	f000 f884 	bl	8000e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480c      	ldr	r0, [pc, #48]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000d32:	f001 fb23 	bl	800237c <HAL_TIM_ConfigClockSource>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d3c:	f000 f876 	bl	8000e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d40:	2300      	movs	r3, #0
 8000d42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d48:	463b      	mov	r3, r7
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_TIM2_Init+0x94>)
 8000d4e:	f001 fceb 	bl	8002728 <HAL_TIMEx_MasterConfigSynchronization>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d58:	f000 f868 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	2000009c 	.word	0x2000009c

08000d68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6e:	f107 0308 	add.w	r3, r7, #8
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	4b28      	ldr	r3, [pc, #160]	; (8000e20 <MX_GPIO_Init+0xb8>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a27      	ldr	r2, [pc, #156]	; (8000e20 <MX_GPIO_Init+0xb8>)
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <MX_GPIO_Init+0xb8>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0304 	and.w	r3, r3, #4
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d94:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <MX_GPIO_Init+0xb8>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	4a21      	ldr	r2, [pc, #132]	; (8000e20 <MX_GPIO_Init+0xb8>)
 8000d9a:	f043 0308 	orr.w	r3, r3, #8
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <MX_GPIO_Init+0xb8>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f003 0308 	and.w	r3, r3, #8
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000dac:	2200      	movs	r2, #0
 8000dae:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8000db2:	481c      	ldr	r0, [pc, #112]	; (8000e24 <MX_GPIO_Init+0xbc>)
 8000db4:	f000 fd25 	bl	8001802 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000db8:	2200      	movs	r2, #0
 8000dba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000dbe:	481a      	ldr	r0, [pc, #104]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000dc0:	f000 fd1f 	bl	8001802 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000dc4:	230e      	movs	r3, #14
 8000dc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	f107 0308 	add.w	r3, r7, #8
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4813      	ldr	r0, [pc, #76]	; (8000e24 <MX_GPIO_Init+0xbc>)
 8000dd8:	f000 fb82 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
 8000ddc:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8000de0:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2302      	movs	r3, #2
 8000dec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dee:	f107 0308 	add.w	r3, r7, #8
 8000df2:	4619      	mov	r1, r3
 8000df4:	480b      	ldr	r0, [pc, #44]	; (8000e24 <MX_GPIO_Init+0xbc>)
 8000df6:	f000 fb73 	bl	80014e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000dfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dfe:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	4619      	mov	r1, r3
 8000e12:	4805      	ldr	r0, [pc, #20]	; (8000e28 <MX_GPIO_Init+0xc0>)
 8000e14:	f000 fb64 	bl	80014e0 <HAL_GPIO_Init>

}
 8000e18:	bf00      	nop
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40010800 	.word	0x40010800
 8000e28:	40010c00 	.word	0x40010c00

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <Error_Handler+0x8>
	...

08000e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6193      	str	r3, [r2, #24]
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e60:	61d3      	str	r3, [r2, #28]
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_MspInit+0x5c>)
 8000e64:	69db      	ldr	r3, [r3, #28]
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_MspInit+0x60>)
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	4a04      	ldr	r2, [pc, #16]	; (8000e98 <HAL_MspInit+0x60>)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	3714      	adds	r7, #20
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010000 	.word	0x40010000

08000e9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eac:	d113      	bne.n	8000ed6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <HAL_TIM_Base_MspInit+0x44>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <HAL_TIM_Base_MspInit+0x44>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	61d3      	str	r3, [r2, #28]
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <HAL_TIM_Base_MspInit+0x44>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	201c      	movs	r0, #28
 8000ecc:	f000 fad1 	bl	8001472 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ed0:	201c      	movs	r0, #28
 8000ed2:	f000 faea 	bl	80014aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <NMI_Handler+0x4>

08000eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr

08000f0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr

08000f26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2a:	f000 f9af 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f38:	4802      	ldr	r0, [pc, #8]	; (8000f44 <TIM2_IRQHandler+0x10>)
 8000f3a:	f001 f917 	bl	800216c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	2000009c 	.word	0x2000009c

08000f48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <HAL_TIM_PeriodElapsedCallback>:
# include "input_reading.h"



void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2 ) {
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f64:	d103      	bne.n	8000f6e <HAL_TIM_PeriodElapsedCallback+0x1a>
		button_reading () ;
 8000f66:	f7ff fd7f 	bl	8000a68 <button_reading>
		timer_run();
 8000f6a:	f7ff f9cf 	bl	800030c <timer_run>
//			case MODE2:
//				timer_run_mode2();
//				break;
//		}
	}
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <update_light_led_buffer>:

static uint8_t translightLEDConversion[NUMBER_OF_LIGHTS] = {0x01,  0x04, 0x02};

static uint8_t translightLEDBuffer[NUMBER_OF_LEDS];

uint8_t update_light_led_buffer(uint8_t val, uint8_t idx){
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	460a      	mov	r2, r1
 8000f82:	71fb      	strb	r3, [r7, #7]
 8000f84:	4613      	mov	r3, r2
 8000f86:	71bb      	strb	r3, [r7, #6]
	if(idx >= NUMBER_OF_LIGHTS) return 0;
 8000f88:	79bb      	ldrb	r3, [r7, #6]
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <update_light_led_buffer+0x1a>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e004      	b.n	8000f9c <update_light_led_buffer+0x24>
	translightLEDBuffer[idx] = val;
 8000f92:	79bb      	ldrb	r3, [r7, #6]
 8000f94:	4904      	ldr	r1, [pc, #16]	; (8000fa8 <update_light_led_buffer+0x30>)
 8000f96:	79fa      	ldrb	r2, [r7, #7]
 8000f98:	54ca      	strb	r2, [r1, r3]
	return 1;
 8000f9a:	2301      	movs	r3, #1
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop
 8000fa8:	20000098 	.word	0x20000098

08000fac <transport_light_led_driver>:

void transport_light_led_driver(){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0

	uint8_t temp =0x0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i<= NUMBER_OF_LEDS; i++) temp |= translightLEDConversion[translightLEDBuffer[i]]<<(i*NUMBER_OF_LIGHTS);
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	e016      	b.n	8000fea <transport_light_led_driver+0x3e>
 8000fbc:	4a41      	ldr	r2, [pc, #260]	; (80010c4 <transport_light_led_driver+0x118>)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b40      	ldr	r3, [pc, #256]	; (80010c8 <transport_light_led_driver+0x11c>)
 8000fc8:	5c9b      	ldrb	r3, [r3, r2]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4413      	add	r3, r2
 8000fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd8:	b25a      	sxtb	r2, r3
 8000fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	dde5      	ble.n	8000fbc <transport_light_led_driver+0x10>
	//if sevenSegmentLEDBuffer[0] = 0; what the value of temp? = sevenSegmentLEDConversion[0]
	//temp = 0x3f 0b00111111
	if(temp & 0x01){ //what is the value of temp & 0x01 = 0x01 --> TRUE
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d005      	beq.n	8001006 <transport_light_led_driver+0x5a>
		HAL_GPIO_WritePin(LED_1_A_PORT, LED_1_A, RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2120      	movs	r1, #32
 8000ffe:	4833      	ldr	r0, [pc, #204]	; (80010cc <transport_light_led_driver+0x120>)
 8001000:	f000 fbff 	bl	8001802 <HAL_GPIO_WritePin>
 8001004:	e004      	b.n	8001010 <transport_light_led_driver+0x64>
	} else{
		HAL_GPIO_WritePin(LED_1_A_PORT, LED_1_A, SET);
 8001006:	2201      	movs	r2, #1
 8001008:	2120      	movs	r1, #32
 800100a:	4830      	ldr	r0, [pc, #192]	; (80010cc <transport_light_led_driver+0x120>)
 800100c:	f000 fbf9 	bl	8001802 <HAL_GPIO_WritePin>
	}

	if(temp & 0x02){
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	2b00      	cmp	r3, #0
 8001018:	d005      	beq.n	8001026 <transport_light_led_driver+0x7a>
		HAL_GPIO_WritePin(LED_1_B_PORT, LED_1_B, RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	2140      	movs	r1, #64	; 0x40
 800101e:	482b      	ldr	r0, [pc, #172]	; (80010cc <transport_light_led_driver+0x120>)
 8001020:	f000 fbef 	bl	8001802 <HAL_GPIO_WritePin>
 8001024:	e004      	b.n	8001030 <transport_light_led_driver+0x84>
	} else{
		HAL_GPIO_WritePin(LED_1_B_PORT, LED_1_B, SET);
 8001026:	2201      	movs	r2, #1
 8001028:	2140      	movs	r1, #64	; 0x40
 800102a:	4828      	ldr	r0, [pc, #160]	; (80010cc <transport_light_led_driver+0x120>)
 800102c:	f000 fbe9 	bl	8001802 <HAL_GPIO_WritePin>
	}

	if(temp & 0x04){
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <transport_light_led_driver+0x9a>
		HAL_GPIO_WritePin(LED_1_C_PORT, LED_1_C, RESET);
 800103a:	2200      	movs	r2, #0
 800103c:	2180      	movs	r1, #128	; 0x80
 800103e:	4823      	ldr	r0, [pc, #140]	; (80010cc <transport_light_led_driver+0x120>)
 8001040:	f000 fbdf 	bl	8001802 <HAL_GPIO_WritePin>
 8001044:	e004      	b.n	8001050 <transport_light_led_driver+0xa4>
	} else{
		HAL_GPIO_WritePin(LED_1_C_PORT, LED_1_C, SET);
 8001046:	2201      	movs	r2, #1
 8001048:	2180      	movs	r1, #128	; 0x80
 800104a:	4820      	ldr	r0, [pc, #128]	; (80010cc <transport_light_led_driver+0x120>)
 800104c:	f000 fbd9 	bl	8001802 <HAL_GPIO_WritePin>
	}

	if(temp & 0x08){
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	2b00      	cmp	r3, #0
 8001058:	d006      	beq.n	8001068 <transport_light_led_driver+0xbc>
		HAL_GPIO_WritePin(LED_1_D_PORT, LED_1_D, RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001060:	481a      	ldr	r0, [pc, #104]	; (80010cc <transport_light_led_driver+0x120>)
 8001062:	f000 fbce 	bl	8001802 <HAL_GPIO_WritePin>
 8001066:	e005      	b.n	8001074 <transport_light_led_driver+0xc8>
	} else{
		HAL_GPIO_WritePin(LED_1_D_PORT, LED_1_D, SET);
 8001068:	2201      	movs	r2, #1
 800106a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106e:	4817      	ldr	r0, [pc, #92]	; (80010cc <transport_light_led_driver+0x120>)
 8001070:	f000 fbc7 	bl	8001802 <HAL_GPIO_WritePin>
	}

	if(temp & 0x10){
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	2b00      	cmp	r3, #0
 800107c:	d006      	beq.n	800108c <transport_light_led_driver+0xe0>
		HAL_GPIO_WritePin(LED_1_E_PORT, LED_1_E, RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001084:	4811      	ldr	r0, [pc, #68]	; (80010cc <transport_light_led_driver+0x120>)
 8001086:	f000 fbbc 	bl	8001802 <HAL_GPIO_WritePin>
 800108a:	e005      	b.n	8001098 <transport_light_led_driver+0xec>
	} else{
		HAL_GPIO_WritePin(LED_1_E_PORT, LED_1_E, SET);
 800108c:	2201      	movs	r2, #1
 800108e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001092:	480e      	ldr	r0, [pc, #56]	; (80010cc <transport_light_led_driver+0x120>)
 8001094:	f000 fbb5 	bl	8001802 <HAL_GPIO_WritePin>
	}
//
	if(temp & 0x20){
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 0320 	and.w	r3, r3, #32
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d006      	beq.n	80010b0 <transport_light_led_driver+0x104>
		HAL_GPIO_WritePin(LED_1_F_PORT, LED_1_F, RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010a8:	4808      	ldr	r0, [pc, #32]	; (80010cc <transport_light_led_driver+0x120>)
 80010aa:	f000 fbaa 	bl	8001802 <HAL_GPIO_WritePin>
	} else{
		HAL_GPIO_WritePin(LED_1_F_PORT, LED_1_F, SET);
	}

}
 80010ae:	e005      	b.n	80010bc <transport_light_led_driver+0x110>
		HAL_GPIO_WritePin(LED_1_F_PORT, LED_1_F, SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <transport_light_led_driver+0x120>)
 80010b8:	f000 fba3 	bl	8001802 <HAL_GPIO_WritePin>
}
 80010bc:	bf00      	nop
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000098 	.word	0x20000098
 80010c8:	20000030 	.word	0x20000030
 80010cc:	40010800 	.word	0x40010800

080010d0 <blinkLED>:

void blinkLED(int mode){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	if(mode==2){
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d11f      	bne.n	800111e <blinkLED+0x4e>
		HAL_GPIO_TogglePin(LED_1_A_PORT, LED_1_A);
 80010de:	2120      	movs	r1, #32
 80010e0:	4833      	ldr	r0, [pc, #204]	; (80011b0 <blinkLED+0xe0>)
 80010e2:	f000 fba6 	bl	8001832 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_1_D_PORT, LED_1_D);
 80010e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ea:	4831      	ldr	r0, [pc, #196]	; (80011b0 <blinkLED+0xe0>)
 80010ec:	f000 fba1 	bl	8001832 <HAL_GPIO_TogglePin>

		HAL_GPIO_WritePin(LED_1_B_PORT, LED_1_B, RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2140      	movs	r1, #64	; 0x40
 80010f4:	482e      	ldr	r0, [pc, #184]	; (80011b0 <blinkLED+0xe0>)
 80010f6:	f000 fb84 	bl	8001802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_C_PORT, LED_1_C, RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2180      	movs	r1, #128	; 0x80
 80010fe:	482c      	ldr	r0, [pc, #176]	; (80011b0 <blinkLED+0xe0>)
 8001100:	f000 fb7f 	bl	8001802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_E_PORT, LED_1_E, RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110a:	4829      	ldr	r0, [pc, #164]	; (80011b0 <blinkLED+0xe0>)
 800110c:	f000 fb79 	bl	8001802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_F_PORT, LED_1_F, RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001116:	4826      	ldr	r0, [pc, #152]	; (80011b0 <blinkLED+0xe0>)
 8001118:	f000 fb73 	bl	8001802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_B_PORT, LED_1_B, RESET);
		HAL_GPIO_WritePin(LED_1_A_PORT, LED_1_A, RESET);
		HAL_GPIO_WritePin(LED_1_E_PORT, LED_1_E, RESET);
		HAL_GPIO_WritePin(LED_1_D_PORT, LED_1_D, RESET);
	}
}
 800111c:	e044      	b.n	80011a8 <blinkLED+0xd8>
	else if(mode==3){
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b03      	cmp	r3, #3
 8001122:	d11f      	bne.n	8001164 <blinkLED+0x94>
		HAL_GPIO_TogglePin(LED_1_B_PORT, LED_1_B);
 8001124:	2140      	movs	r1, #64	; 0x40
 8001126:	4822      	ldr	r0, [pc, #136]	; (80011b0 <blinkLED+0xe0>)
 8001128:	f000 fb83 	bl	8001832 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_1_E_PORT, LED_1_E);
 800112c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001130:	481f      	ldr	r0, [pc, #124]	; (80011b0 <blinkLED+0xe0>)
 8001132:	f000 fb7e 	bl	8001832 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(LED_1_A_PORT, LED_1_A, RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	2120      	movs	r1, #32
 800113a:	481d      	ldr	r0, [pc, #116]	; (80011b0 <blinkLED+0xe0>)
 800113c:	f000 fb61 	bl	8001802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_C_PORT, LED_1_C, RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2180      	movs	r1, #128	; 0x80
 8001144:	481a      	ldr	r0, [pc, #104]	; (80011b0 <blinkLED+0xe0>)
 8001146:	f000 fb5c 	bl	8001802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_D_PORT, LED_1_D, RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001150:	4817      	ldr	r0, [pc, #92]	; (80011b0 <blinkLED+0xe0>)
 8001152:	f000 fb56 	bl	8001802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_F_PORT, LED_1_F, RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800115c:	4814      	ldr	r0, [pc, #80]	; (80011b0 <blinkLED+0xe0>)
 800115e:	f000 fb50 	bl	8001802 <HAL_GPIO_WritePin>
}
 8001162:	e021      	b.n	80011a8 <blinkLED+0xd8>
	else if(mode==4){
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b04      	cmp	r3, #4
 8001168:	d11e      	bne.n	80011a8 <blinkLED+0xd8>
		HAL_GPIO_TogglePin(LED_1_C_PORT, LED_1_C);
 800116a:	2180      	movs	r1, #128	; 0x80
 800116c:	4810      	ldr	r0, [pc, #64]	; (80011b0 <blinkLED+0xe0>)
 800116e:	f000 fb60 	bl	8001832 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED_1_F_PORT, LED_1_F);
 8001172:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001176:	480e      	ldr	r0, [pc, #56]	; (80011b0 <blinkLED+0xe0>)
 8001178:	f000 fb5b 	bl	8001832 <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(LED_1_B_PORT, LED_1_B, RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2140      	movs	r1, #64	; 0x40
 8001180:	480b      	ldr	r0, [pc, #44]	; (80011b0 <blinkLED+0xe0>)
 8001182:	f000 fb3e 	bl	8001802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_A_PORT, LED_1_A, RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2120      	movs	r1, #32
 800118a:	4809      	ldr	r0, [pc, #36]	; (80011b0 <blinkLED+0xe0>)
 800118c:	f000 fb39 	bl	8001802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_E_PORT, LED_1_E, RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <blinkLED+0xe0>)
 8001198:	f000 fb33 	bl	8001802 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_1_D_PORT, LED_1_D, RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011a2:	4803      	ldr	r0, [pc, #12]	; (80011b0 <blinkLED+0xe0>)
 80011a4:	f000 fb2d 	bl	8001802 <HAL_GPIO_WritePin>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	40010800 	.word	0x40010800

080011b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b4:	480c      	ldr	r0, [pc, #48]	; (80011e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011b6:	490d      	ldr	r1, [pc, #52]	; (80011ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011b8:	4a0d      	ldr	r2, [pc, #52]	; (80011f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011bc:	e002      	b.n	80011c4 <LoopCopyDataInit>

080011be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c2:	3304      	adds	r3, #4

080011c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c8:	d3f9      	bcc.n	80011be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ca:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011cc:	4c0a      	ldr	r4, [pc, #40]	; (80011f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d0:	e001      	b.n	80011d6 <LoopFillZerobss>

080011d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d4:	3204      	adds	r2, #4

080011d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d8:	d3fb      	bcc.n	80011d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80011da:	f7ff feb5 	bl	8000f48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011de:	f001 fb0d 	bl	80027fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011e2:	f7ff fd27 	bl	8000c34 <main>
  bx lr
 80011e6:	4770      	bx	lr
  ldr r0, =_sdata
 80011e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ec:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 80011f0:	08002894 	.word	0x08002894
  ldr r2, =_sbss
 80011f4:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 80011f8:	200000e8 	.word	0x200000e8

080011fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011fc:	e7fe      	b.n	80011fc <ADC1_2_IRQHandler>
	...

08001200 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <HAL_Init+0x28>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a07      	ldr	r2, [pc, #28]	; (8001228 <HAL_Init+0x28>)
 800120a:	f043 0310 	orr.w	r3, r3, #16
 800120e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001210:	2003      	movs	r0, #3
 8001212:	f000 f923 	bl	800145c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001216:	200f      	movs	r0, #15
 8001218:	f000 f808 	bl	800122c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800121c:	f7ff fe0c 	bl	8000e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40022000 	.word	0x40022000

0800122c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <HAL_InitTick+0x54>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b12      	ldr	r3, [pc, #72]	; (8001284 <HAL_InitTick+0x58>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	fbb3 f3f1 	udiv	r3, r3, r1
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f93b 	bl	80014c6 <HAL_SYSTICK_Config>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e00e      	b.n	8001278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0f      	cmp	r3, #15
 800125e:	d80a      	bhi.n	8001276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f000 f903 	bl	8001472 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800126c:	4a06      	ldr	r2, [pc, #24]	; (8001288 <HAL_InitTick+0x5c>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e000      	b.n	8001278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2000002c 	.word	0x2000002c
 8001284:	20000038 	.word	0x20000038
 8001288:	20000034 	.word	0x20000034

0800128c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <HAL_IncTick+0x1c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <HAL_IncTick+0x20>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a03      	ldr	r2, [pc, #12]	; (80012ac <HAL_IncTick+0x20>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	20000038 	.word	0x20000038
 80012ac:	200000e4 	.word	0x200000e4

080012b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  return uwTick;
 80012b4:	4b02      	ldr	r3, [pc, #8]	; (80012c0 <HAL_GetTick+0x10>)
 80012b6:	681b      	ldr	r3, [r3, #0]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	200000e4 	.word	0x200000e4

080012c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f6:	4a04      	ldr	r2, [pc, #16]	; (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	60d3      	str	r3, [r2, #12]
}
 80012fc:	bf00      	nop
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	bc80      	pop	{r7}
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001310:	4b04      	ldr	r3, [pc, #16]	; (8001324 <__NVIC_GetPriorityGrouping+0x18>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	f003 0307 	and.w	r3, r3, #7
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	2b00      	cmp	r3, #0
 8001338:	db0b      	blt.n	8001352 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	f003 021f 	and.w	r2, r3, #31
 8001340:	4906      	ldr	r1, [pc, #24]	; (800135c <__NVIC_EnableIRQ+0x34>)
 8001342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001346:	095b      	lsrs	r3, r3, #5
 8001348:	2001      	movs	r0, #1
 800134a:	fa00 f202 	lsl.w	r2, r0, r2
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001352:	bf00      	nop
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	bc80      	pop	{r7}
 800135a:	4770      	bx	lr
 800135c:	e000e100 	.word	0xe000e100

08001360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	6039      	str	r1, [r7, #0]
 800136a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001370:	2b00      	cmp	r3, #0
 8001372:	db0a      	blt.n	800138a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	b2da      	uxtb	r2, r3
 8001378:	490c      	ldr	r1, [pc, #48]	; (80013ac <__NVIC_SetPriority+0x4c>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	0112      	lsls	r2, r2, #4
 8001380:	b2d2      	uxtb	r2, r2
 8001382:	440b      	add	r3, r1
 8001384:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001388:	e00a      	b.n	80013a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4908      	ldr	r1, [pc, #32]	; (80013b0 <__NVIC_SetPriority+0x50>)
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	f003 030f 	and.w	r3, r3, #15
 8001396:	3b04      	subs	r3, #4
 8001398:	0112      	lsls	r2, r2, #4
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	440b      	add	r3, r1
 800139e:	761a      	strb	r2, [r3, #24]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000e100 	.word	0xe000e100
 80013b0:	e000ed00 	.word	0xe000ed00

080013b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	; 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f1c3 0307 	rsb	r3, r3, #7
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	bf28      	it	cs
 80013d2:	2304      	movcs	r3, #4
 80013d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3304      	adds	r3, #4
 80013da:	2b06      	cmp	r3, #6
 80013dc:	d902      	bls.n	80013e4 <NVIC_EncodePriority+0x30>
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3b03      	subs	r3, #3
 80013e2:	e000      	b.n	80013e6 <NVIC_EncodePriority+0x32>
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43da      	mvns	r2, r3
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	401a      	ands	r2, r3
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa01 f303 	lsl.w	r3, r1, r3
 8001406:	43d9      	mvns	r1, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	4313      	orrs	r3, r2
         );
}
 800140e:	4618      	mov	r0, r3
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	3b01      	subs	r3, #1
 8001424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001428:	d301      	bcc.n	800142e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800142a:	2301      	movs	r3, #1
 800142c:	e00f      	b.n	800144e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142e:	4a0a      	ldr	r2, [pc, #40]	; (8001458 <SysTick_Config+0x40>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3b01      	subs	r3, #1
 8001434:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001436:	210f      	movs	r1, #15
 8001438:	f04f 30ff 	mov.w	r0, #4294967295
 800143c:	f7ff ff90 	bl	8001360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <SysTick_Config+0x40>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <SysTick_Config+0x40>)
 8001448:	2207      	movs	r2, #7
 800144a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	e000e010 	.word	0xe000e010

0800145c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ff2d 	bl	80012c4 <__NVIC_SetPriorityGrouping>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001480:	2300      	movs	r3, #0
 8001482:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001484:	f7ff ff42 	bl	800130c <__NVIC_GetPriorityGrouping>
 8001488:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	68b9      	ldr	r1, [r7, #8]
 800148e:	6978      	ldr	r0, [r7, #20]
 8001490:	f7ff ff90 	bl	80013b4 <NVIC_EncodePriority>
 8001494:	4602      	mov	r2, r0
 8001496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149a:	4611      	mov	r1, r2
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff5f 	bl	8001360 <__NVIC_SetPriority>
}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	4603      	mov	r3, r0
 80014b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff ff35 	bl	8001328 <__NVIC_EnableIRQ>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b082      	sub	sp, #8
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ffa2 	bl	8001418 <SysTick_Config>
 80014d4:	4603      	mov	r3, r0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b08b      	sub	sp, #44	; 0x2c
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ea:	2300      	movs	r3, #0
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ee:	2300      	movs	r3, #0
 80014f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f2:	e148      	b.n	8001786 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014f4:	2201      	movs	r2, #1
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	69fa      	ldr	r2, [r7, #28]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	429a      	cmp	r2, r3
 800150e:	f040 8137 	bne.w	8001780 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	4aa3      	ldr	r2, [pc, #652]	; (80017a4 <HAL_GPIO_Init+0x2c4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d05e      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 800151c:	4aa1      	ldr	r2, [pc, #644]	; (80017a4 <HAL_GPIO_Init+0x2c4>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d875      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 8001522:	4aa1      	ldr	r2, [pc, #644]	; (80017a8 <HAL_GPIO_Init+0x2c8>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d058      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 8001528:	4a9f      	ldr	r2, [pc, #636]	; (80017a8 <HAL_GPIO_Init+0x2c8>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d86f      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 800152e:	4a9f      	ldr	r2, [pc, #636]	; (80017ac <HAL_GPIO_Init+0x2cc>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d052      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 8001534:	4a9d      	ldr	r2, [pc, #628]	; (80017ac <HAL_GPIO_Init+0x2cc>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d869      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 800153a:	4a9d      	ldr	r2, [pc, #628]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d04c      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 8001540:	4a9b      	ldr	r2, [pc, #620]	; (80017b0 <HAL_GPIO_Init+0x2d0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d863      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 8001546:	4a9b      	ldr	r2, [pc, #620]	; (80017b4 <HAL_GPIO_Init+0x2d4>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d046      	beq.n	80015da <HAL_GPIO_Init+0xfa>
 800154c:	4a99      	ldr	r2, [pc, #612]	; (80017b4 <HAL_GPIO_Init+0x2d4>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d85d      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 8001552:	2b12      	cmp	r3, #18
 8001554:	d82a      	bhi.n	80015ac <HAL_GPIO_Init+0xcc>
 8001556:	2b12      	cmp	r3, #18
 8001558:	d859      	bhi.n	800160e <HAL_GPIO_Init+0x12e>
 800155a:	a201      	add	r2, pc, #4	; (adr r2, 8001560 <HAL_GPIO_Init+0x80>)
 800155c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001560:	080015db 	.word	0x080015db
 8001564:	080015b5 	.word	0x080015b5
 8001568:	080015c7 	.word	0x080015c7
 800156c:	08001609 	.word	0x08001609
 8001570:	0800160f 	.word	0x0800160f
 8001574:	0800160f 	.word	0x0800160f
 8001578:	0800160f 	.word	0x0800160f
 800157c:	0800160f 	.word	0x0800160f
 8001580:	0800160f 	.word	0x0800160f
 8001584:	0800160f 	.word	0x0800160f
 8001588:	0800160f 	.word	0x0800160f
 800158c:	0800160f 	.word	0x0800160f
 8001590:	0800160f 	.word	0x0800160f
 8001594:	0800160f 	.word	0x0800160f
 8001598:	0800160f 	.word	0x0800160f
 800159c:	0800160f 	.word	0x0800160f
 80015a0:	0800160f 	.word	0x0800160f
 80015a4:	080015bd 	.word	0x080015bd
 80015a8:	080015d1 	.word	0x080015d1
 80015ac:	4a82      	ldr	r2, [pc, #520]	; (80017b8 <HAL_GPIO_Init+0x2d8>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d013      	beq.n	80015da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015b2:	e02c      	b.n	800160e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	623b      	str	r3, [r7, #32]
          break;
 80015ba:	e029      	b.n	8001610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	3304      	adds	r3, #4
 80015c2:	623b      	str	r3, [r7, #32]
          break;
 80015c4:	e024      	b.n	8001610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	3308      	adds	r3, #8
 80015cc:	623b      	str	r3, [r7, #32]
          break;
 80015ce:	e01f      	b.n	8001610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	330c      	adds	r3, #12
 80015d6:	623b      	str	r3, [r7, #32]
          break;
 80015d8:	e01a      	b.n	8001610 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d102      	bne.n	80015e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015e2:	2304      	movs	r3, #4
 80015e4:	623b      	str	r3, [r7, #32]
          break;
 80015e6:	e013      	b.n	8001610 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d105      	bne.n	80015fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015f0:	2308      	movs	r3, #8
 80015f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	611a      	str	r2, [r3, #16]
          break;
 80015fa:	e009      	b.n	8001610 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015fc:	2308      	movs	r3, #8
 80015fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	615a      	str	r2, [r3, #20]
          break;
 8001606:	e003      	b.n	8001610 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
          break;
 800160c:	e000      	b.n	8001610 <HAL_GPIO_Init+0x130>
          break;
 800160e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	2bff      	cmp	r3, #255	; 0xff
 8001614:	d801      	bhi.n	800161a <HAL_GPIO_Init+0x13a>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	e001      	b.n	800161e <HAL_GPIO_Init+0x13e>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3304      	adds	r3, #4
 800161e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	2bff      	cmp	r3, #255	; 0xff
 8001624:	d802      	bhi.n	800162c <HAL_GPIO_Init+0x14c>
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	e002      	b.n	8001632 <HAL_GPIO_Init+0x152>
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	3b08      	subs	r3, #8
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	210f      	movs	r1, #15
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	fa01 f303 	lsl.w	r3, r1, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	401a      	ands	r2, r3
 8001644:	6a39      	ldr	r1, [r7, #32]
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	fa01 f303 	lsl.w	r3, r1, r3
 800164c:	431a      	orrs	r2, r3
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 8090 	beq.w	8001780 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001660:	4b56      	ldr	r3, [pc, #344]	; (80017bc <HAL_GPIO_Init+0x2dc>)
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	4a55      	ldr	r2, [pc, #340]	; (80017bc <HAL_GPIO_Init+0x2dc>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	6193      	str	r3, [r2, #24]
 800166c:	4b53      	ldr	r3, [pc, #332]	; (80017bc <HAL_GPIO_Init+0x2dc>)
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	60bb      	str	r3, [r7, #8]
 8001676:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001678:	4a51      	ldr	r2, [pc, #324]	; (80017c0 <HAL_GPIO_Init+0x2e0>)
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	089b      	lsrs	r3, r3, #2
 800167e:	3302      	adds	r3, #2
 8001680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001684:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	f003 0303 	and.w	r3, r3, #3
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	220f      	movs	r2, #15
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	43db      	mvns	r3, r3
 8001696:	68fa      	ldr	r2, [r7, #12]
 8001698:	4013      	ands	r3, r2
 800169a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a49      	ldr	r2, [pc, #292]	; (80017c4 <HAL_GPIO_Init+0x2e4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d00d      	beq.n	80016c0 <HAL_GPIO_Init+0x1e0>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a48      	ldr	r2, [pc, #288]	; (80017c8 <HAL_GPIO_Init+0x2e8>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d007      	beq.n	80016bc <HAL_GPIO_Init+0x1dc>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a47      	ldr	r2, [pc, #284]	; (80017cc <HAL_GPIO_Init+0x2ec>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d101      	bne.n	80016b8 <HAL_GPIO_Init+0x1d8>
 80016b4:	2302      	movs	r3, #2
 80016b6:	e004      	b.n	80016c2 <HAL_GPIO_Init+0x1e2>
 80016b8:	2303      	movs	r3, #3
 80016ba:	e002      	b.n	80016c2 <HAL_GPIO_Init+0x1e2>
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <HAL_GPIO_Init+0x1e2>
 80016c0:	2300      	movs	r3, #0
 80016c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c4:	f002 0203 	and.w	r2, r2, #3
 80016c8:	0092      	lsls	r2, r2, #2
 80016ca:	4093      	lsls	r3, r2
 80016cc:	68fa      	ldr	r2, [r7, #12]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016d2:	493b      	ldr	r1, [pc, #236]	; (80017c0 <HAL_GPIO_Init+0x2e0>)
 80016d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d6:	089b      	lsrs	r3, r3, #2
 80016d8:	3302      	adds	r3, #2
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d006      	beq.n	80016fa <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016ec:	4b38      	ldr	r3, [pc, #224]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	4937      	ldr	r1, [pc, #220]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	600b      	str	r3, [r1, #0]
 80016f8:	e006      	b.n	8001708 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016fa:	4b35      	ldr	r3, [pc, #212]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	43db      	mvns	r3, r3
 8001702:	4933      	ldr	r1, [pc, #204]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 8001704:	4013      	ands	r3, r2
 8001706:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d006      	beq.n	8001722 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001714:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	492d      	ldr	r1, [pc, #180]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	4313      	orrs	r3, r2
 800171e:	604b      	str	r3, [r1, #4]
 8001720:	e006      	b.n	8001730 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001722:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	43db      	mvns	r3, r3
 800172a:	4929      	ldr	r1, [pc, #164]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 800172c:	4013      	ands	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d006      	beq.n	800174a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800173c:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	4923      	ldr	r1, [pc, #140]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	608b      	str	r3, [r1, #8]
 8001748:	e006      	b.n	8001758 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800174a:	4b21      	ldr	r3, [pc, #132]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 800174c:	689a      	ldr	r2, [r3, #8]
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	43db      	mvns	r3, r3
 8001752:	491f      	ldr	r1, [pc, #124]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 8001754:	4013      	ands	r3, r2
 8001756:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001764:	4b1a      	ldr	r3, [pc, #104]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 8001766:	68da      	ldr	r2, [r3, #12]
 8001768:	4919      	ldr	r1, [pc, #100]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 800176a:	69bb      	ldr	r3, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	60cb      	str	r3, [r1, #12]
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001772:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	43db      	mvns	r3, r3
 800177a:	4915      	ldr	r1, [pc, #84]	; (80017d0 <HAL_GPIO_Init+0x2f0>)
 800177c:	4013      	ands	r3, r2
 800177e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	3301      	adds	r3, #1
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	fa22 f303 	lsr.w	r3, r2, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	f47f aeaf 	bne.w	80014f4 <HAL_GPIO_Init+0x14>
  }
}
 8001796:	bf00      	nop
 8001798:	bf00      	nop
 800179a:	372c      	adds	r7, #44	; 0x2c
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	10320000 	.word	0x10320000
 80017a8:	10310000 	.word	0x10310000
 80017ac:	10220000 	.word	0x10220000
 80017b0:	10210000 	.word	0x10210000
 80017b4:	10120000 	.word	0x10120000
 80017b8:	10110000 	.word	0x10110000
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40010000 	.word	0x40010000
 80017c4:	40010800 	.word	0x40010800
 80017c8:	40010c00 	.word	0x40010c00
 80017cc:	40011000 	.word	0x40011000
 80017d0:	40010400 	.word	0x40010400

080017d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	460b      	mov	r3, r1
 80017de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	887b      	ldrh	r3, [r7, #2]
 80017e6:	4013      	ands	r3, r2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d002      	beq.n	80017f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017ec:	2301      	movs	r3, #1
 80017ee:	73fb      	strb	r3, [r7, #15]
 80017f0:	e001      	b.n	80017f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	460b      	mov	r3, r1
 800180c:	807b      	strh	r3, [r7, #2]
 800180e:	4613      	mov	r3, r2
 8001810:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001812:	787b      	ldrb	r3, [r7, #1]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001818:	887a      	ldrh	r2, [r7, #2]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800181e:	e003      	b.n	8001828 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001820:	887b      	ldrh	r3, [r7, #2]
 8001822:	041a      	lsls	r2, r3, #16
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	611a      	str	r2, [r3, #16]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001832:	b480      	push	{r7}
 8001834:	b085      	sub	sp, #20
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	460b      	mov	r3, r1
 800183c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001844:	887a      	ldrh	r2, [r7, #2]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	4013      	ands	r3, r2
 800184a:	041a      	lsls	r2, r3, #16
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	43d9      	mvns	r1, r3
 8001850:	887b      	ldrh	r3, [r7, #2]
 8001852:	400b      	ands	r3, r1
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	611a      	str	r2, [r3, #16]
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e26c      	b.n	8001d50 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 8087 	beq.w	8001992 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001884:	4b92      	ldr	r3, [pc, #584]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b04      	cmp	r3, #4
 800188e:	d00c      	beq.n	80018aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001890:	4b8f      	ldr	r3, [pc, #572]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b08      	cmp	r3, #8
 800189a:	d112      	bne.n	80018c2 <HAL_RCC_OscConfig+0x5e>
 800189c:	4b8c      	ldr	r3, [pc, #560]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a8:	d10b      	bne.n	80018c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018aa:	4b89      	ldr	r3, [pc, #548]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d06c      	beq.n	8001990 <HAL_RCC_OscConfig+0x12c>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d168      	bne.n	8001990 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e246      	b.n	8001d50 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ca:	d106      	bne.n	80018da <HAL_RCC_OscConfig+0x76>
 80018cc:	4b80      	ldr	r3, [pc, #512]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a7f      	ldr	r2, [pc, #508]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	e02e      	b.n	8001938 <HAL_RCC_OscConfig+0xd4>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0x98>
 80018e2:	4b7b      	ldr	r3, [pc, #492]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a7a      	ldr	r2, [pc, #488]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80018e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b78      	ldr	r3, [pc, #480]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a77      	ldr	r2, [pc, #476]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e01d      	b.n	8001938 <HAL_RCC_OscConfig+0xd4>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0xbc>
 8001906:	4b72      	ldr	r3, [pc, #456]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a71      	ldr	r2, [pc, #452]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 800190c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b6f      	ldr	r3, [pc, #444]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a6e      	ldr	r2, [pc, #440]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e00b      	b.n	8001938 <HAL_RCC_OscConfig+0xd4>
 8001920:	4b6b      	ldr	r3, [pc, #428]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a6a      	ldr	r2, [pc, #424]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b68      	ldr	r3, [pc, #416]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a67      	ldr	r2, [pc, #412]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001936:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d013      	beq.n	8001968 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fcb6 	bl	80012b0 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff fcb2 	bl	80012b0 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	; 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e1fa      	b.n	8001d50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	4b5d      	ldr	r3, [pc, #372]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0xe4>
 8001966:	e014      	b.n	8001992 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fca2 	bl	80012b0 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001970:	f7ff fc9e 	bl	80012b0 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b64      	cmp	r3, #100	; 0x64
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e1e6      	b.n	8001d50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001982:	4b53      	ldr	r3, [pc, #332]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x10c>
 800198e:	e000      	b.n	8001992 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d063      	beq.n	8001a66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800199e:	4b4c      	ldr	r3, [pc, #304]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00b      	beq.n	80019c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019aa:	4b49      	ldr	r3, [pc, #292]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d11c      	bne.n	80019f0 <HAL_RCC_OscConfig+0x18c>
 80019b6:	4b46      	ldr	r3, [pc, #280]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d116      	bne.n	80019f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c2:	4b43      	ldr	r3, [pc, #268]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <HAL_RCC_OscConfig+0x176>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d001      	beq.n	80019da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e1ba      	b.n	8001d50 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019da:	4b3d      	ldr	r3, [pc, #244]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4939      	ldr	r1, [pc, #228]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ee:	e03a      	b.n	8001a66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d020      	beq.n	8001a3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f8:	4b36      	ldr	r3, [pc, #216]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fe:	f7ff fc57 	bl	80012b0 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a06:	f7ff fc53 	bl	80012b0 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e19b      	b.n	8001d50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a18:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a24:	4b2a      	ldr	r3, [pc, #168]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4927      	ldr	r1, [pc, #156]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
 8001a38:	e015      	b.n	8001a66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a3a:	4b26      	ldr	r3, [pc, #152]	; (8001ad4 <HAL_RCC_OscConfig+0x270>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7ff fc36 	bl	80012b0 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a48:	f7ff fc32 	bl	80012b0 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e17a      	b.n	8001d50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d03a      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d019      	beq.n	8001aae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a80:	f7ff fc16 	bl	80012b0 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a88:	f7ff fc12 	bl	80012b0 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e15a      	b.n	8001d50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	f000 faa6 	bl	8001ff8 <RCC_Delay>
 8001aac:	e01c      	b.n	8001ae8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab4:	f7ff fbfc 	bl	80012b0 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aba:	e00f      	b.n	8001adc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001abc:	f7ff fbf8 	bl	80012b0 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d908      	bls.n	8001adc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e140      	b.n	8001d50 <HAL_RCC_OscConfig+0x4ec>
 8001ace:	bf00      	nop
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	42420000 	.word	0x42420000
 8001ad8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001adc:	4b9e      	ldr	r3, [pc, #632]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1e9      	bne.n	8001abc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 80a6 	beq.w	8001c42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001af6:	2300      	movs	r3, #0
 8001af8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001afa:	4b97      	ldr	r3, [pc, #604]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10d      	bne.n	8001b22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b06:	4b94      	ldr	r3, [pc, #592]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	4a93      	ldr	r2, [pc, #588]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b10:	61d3      	str	r3, [r2, #28]
 8001b12:	4b91      	ldr	r3, [pc, #580]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b22:	4b8e      	ldr	r3, [pc, #568]	; (8001d5c <HAL_RCC_OscConfig+0x4f8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d118      	bne.n	8001b60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b2e:	4b8b      	ldr	r3, [pc, #556]	; (8001d5c <HAL_RCC_OscConfig+0x4f8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a8a      	ldr	r2, [pc, #552]	; (8001d5c <HAL_RCC_OscConfig+0x4f8>)
 8001b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b3a:	f7ff fbb9 	bl	80012b0 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b42:	f7ff fbb5 	bl	80012b0 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b64      	cmp	r3, #100	; 0x64
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e0fd      	b.n	8001d50 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	4b81      	ldr	r3, [pc, #516]	; (8001d5c <HAL_RCC_OscConfig+0x4f8>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d106      	bne.n	8001b76 <HAL_RCC_OscConfig+0x312>
 8001b68:	4b7b      	ldr	r3, [pc, #492]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	4a7a      	ldr	r2, [pc, #488]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6213      	str	r3, [r2, #32]
 8001b74:	e02d      	b.n	8001bd2 <HAL_RCC_OscConfig+0x36e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d10c      	bne.n	8001b98 <HAL_RCC_OscConfig+0x334>
 8001b7e:	4b76      	ldr	r3, [pc, #472]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	4a75      	ldr	r2, [pc, #468]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	6213      	str	r3, [r2, #32]
 8001b8a:	4b73      	ldr	r3, [pc, #460]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	4a72      	ldr	r2, [pc, #456]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001b90:	f023 0304 	bic.w	r3, r3, #4
 8001b94:	6213      	str	r3, [r2, #32]
 8001b96:	e01c      	b.n	8001bd2 <HAL_RCC_OscConfig+0x36e>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	2b05      	cmp	r3, #5
 8001b9e:	d10c      	bne.n	8001bba <HAL_RCC_OscConfig+0x356>
 8001ba0:	4b6d      	ldr	r3, [pc, #436]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4a6c      	ldr	r2, [pc, #432]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001ba6:	f043 0304 	orr.w	r3, r3, #4
 8001baa:	6213      	str	r3, [r2, #32]
 8001bac:	4b6a      	ldr	r3, [pc, #424]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	4a69      	ldr	r2, [pc, #420]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6213      	str	r3, [r2, #32]
 8001bb8:	e00b      	b.n	8001bd2 <HAL_RCC_OscConfig+0x36e>
 8001bba:	4b67      	ldr	r3, [pc, #412]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	4a66      	ldr	r2, [pc, #408]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	f023 0301 	bic.w	r3, r3, #1
 8001bc4:	6213      	str	r3, [r2, #32]
 8001bc6:	4b64      	ldr	r3, [pc, #400]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	4a63      	ldr	r2, [pc, #396]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001bcc:	f023 0304 	bic.w	r3, r3, #4
 8001bd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d015      	beq.n	8001c06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bda:	f7ff fb69 	bl	80012b0 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be0:	e00a      	b.n	8001bf8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be2:	f7ff fb65 	bl	80012b0 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e0ab      	b.n	8001d50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf8:	4b57      	ldr	r3, [pc, #348]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001bfa:	6a1b      	ldr	r3, [r3, #32]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0ee      	beq.n	8001be2 <HAL_RCC_OscConfig+0x37e>
 8001c04:	e014      	b.n	8001c30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c06:	f7ff fb53 	bl	80012b0 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0c:	e00a      	b.n	8001c24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0e:	f7ff fb4f 	bl	80012b0 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e095      	b.n	8001d50 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c24:	4b4c      	ldr	r3, [pc, #304]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001c26:	6a1b      	ldr	r3, [r3, #32]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d1ee      	bne.n	8001c0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c30:	7dfb      	ldrb	r3, [r7, #23]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d105      	bne.n	8001c42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c36:	4b48      	ldr	r3, [pc, #288]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	4a47      	ldr	r2, [pc, #284]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 8081 	beq.w	8001d4e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c4c:	4b42      	ldr	r3, [pc, #264]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 030c 	and.w	r3, r3, #12
 8001c54:	2b08      	cmp	r3, #8
 8001c56:	d061      	beq.n	8001d1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d146      	bne.n	8001cee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c60:	4b3f      	ldr	r3, [pc, #252]	; (8001d60 <HAL_RCC_OscConfig+0x4fc>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c66:	f7ff fb23 	bl	80012b0 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6e:	f7ff fb1f 	bl	80012b0 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e067      	b.n	8001d50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c80:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1f0      	bne.n	8001c6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c94:	d108      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c96:	4b30      	ldr	r3, [pc, #192]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	492d      	ldr	r1, [pc, #180]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ca8:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a19      	ldr	r1, [r3, #32]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb8:	430b      	orrs	r3, r1
 8001cba:	4927      	ldr	r1, [pc, #156]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cc0:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <HAL_RCC_OscConfig+0x4fc>)
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc6:	f7ff faf3 	bl	80012b0 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cce:	f7ff faef 	bl	80012b0 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e037      	b.n	8001d50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x46a>
 8001cec:	e02f      	b.n	8001d4e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cee:	4b1c      	ldr	r3, [pc, #112]	; (8001d60 <HAL_RCC_OscConfig+0x4fc>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fadc 	bl	80012b0 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfc:	f7ff fad8 	bl	80012b0 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e020      	b.n	8001d50 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0x498>
 8001d1a:	e018      	b.n	8001d4e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e013      	b.n	8001d50 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_RCC_OscConfig+0x4f4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d106      	bne.n	8001d4a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d001      	beq.n	8001d4e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40007000 	.word	0x40007000
 8001d60:	42420060 	.word	0x42420060

08001d64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0d0      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d78:	4b6a      	ldr	r3, [pc, #424]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d910      	bls.n	8001da8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b67      	ldr	r3, [pc, #412]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f023 0207 	bic.w	r2, r3, #7
 8001d8e:	4965      	ldr	r1, [pc, #404]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d96:	4b63      	ldr	r3, [pc, #396]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d001      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0b8      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d020      	beq.n	8001df6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dc0:	4b59      	ldr	r3, [pc, #356]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	4a58      	ldr	r2, [pc, #352]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001dca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0308 	and.w	r3, r3, #8
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dd8:	4b53      	ldr	r3, [pc, #332]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4a52      	ldr	r2, [pc, #328]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001de2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de4:	4b50      	ldr	r3, [pc, #320]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	494d      	ldr	r1, [pc, #308]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d040      	beq.n	8001e84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d107      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0a:	4b47      	ldr	r3, [pc, #284]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d115      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e07f      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d107      	bne.n	8001e32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e22:	4b41      	ldr	r3, [pc, #260]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d109      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e073      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e32:	4b3d      	ldr	r3, [pc, #244]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e06b      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e42:	4b39      	ldr	r3, [pc, #228]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f023 0203 	bic.w	r2, r3, #3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	4936      	ldr	r1, [pc, #216]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e54:	f7ff fa2c 	bl	80012b0 <HAL_GetTick>
 8001e58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e5c:	f7ff fa28 	bl	80012b0 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e053      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e72:	4b2d      	ldr	r3, [pc, #180]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 020c 	and.w	r2, r3, #12
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d1eb      	bne.n	8001e5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e84:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d210      	bcs.n	8001eb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e92:	4b24      	ldr	r3, [pc, #144]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 0207 	bic.w	r2, r3, #7
 8001e9a:	4922      	ldr	r1, [pc, #136]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e032      	b.n	8001f1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d008      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4916      	ldr	r1, [pc, #88]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d009      	beq.n	8001ef2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ede:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	490e      	ldr	r1, [pc, #56]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ef2:	f000 f821 	bl	8001f38 <HAL_RCC_GetSysClockFreq>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	490a      	ldr	r1, [pc, #40]	; (8001f2c <HAL_RCC_ClockConfig+0x1c8>)
 8001f04:	5ccb      	ldrb	r3, [r1, r3]
 8001f06:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0a:	4a09      	ldr	r2, [pc, #36]	; (8001f30 <HAL_RCC_ClockConfig+0x1cc>)
 8001f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_RCC_ClockConfig+0x1d0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff f98a 	bl	800122c <HAL_InitTick>

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40022000 	.word	0x40022000
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	0800287c 	.word	0x0800287c
 8001f30:	2000002c 	.word	0x2000002c
 8001f34:	20000034 	.word	0x20000034

08001f38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f38:	b490      	push	{r4, r7}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f3e:	4b2a      	ldr	r3, [pc, #168]	; (8001fe8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f40:	1d3c      	adds	r4, r7, #4
 8001f42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f48:	f240 2301 	movw	r3, #513	; 0x201
 8001f4c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f62:	4b22      	ldr	r3, [pc, #136]	; (8001fec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d002      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x40>
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d003      	beq.n	8001f7e <HAL_RCC_GetSysClockFreq+0x46>
 8001f76:	e02d      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f78:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f7a:	623b      	str	r3, [r7, #32]
      break;
 8001f7c:	e02d      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	0c9b      	lsrs	r3, r3, #18
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001f90:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d013      	beq.n	8001fc4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f9c:	4b13      	ldr	r3, [pc, #76]	; (8001fec <HAL_RCC_GetSysClockFreq+0xb4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	0c5b      	lsrs	r3, r3, #17
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001faa:	4413      	add	r3, r2
 8001fac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001fb0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	4a0e      	ldr	r2, [pc, #56]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fb6:	fb02 f203 	mul.w	r2, r2, r3
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc2:	e004      	b.n	8001fce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fc8:	fb02 f303 	mul.w	r3, r2, r3
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	623b      	str	r3, [r7, #32]
      break;
 8001fd2:	e002      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fd4:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fd6:	623b      	str	r3, [r7, #32]
      break;
 8001fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fda:	6a3b      	ldr	r3, [r7, #32]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3728      	adds	r7, #40	; 0x28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc90      	pop	{r4, r7}
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	0800286c 	.word	0x0800286c
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	007a1200 	.word	0x007a1200
 8001ff4:	003d0900 	.word	0x003d0900

08001ff8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002000:	4b0a      	ldr	r3, [pc, #40]	; (800202c <RCC_Delay+0x34>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <RCC_Delay+0x38>)
 8002006:	fba2 2303 	umull	r2, r3, r2, r3
 800200a:	0a5b      	lsrs	r3, r3, #9
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002014:	bf00      	nop
  }
  while (Delay --);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	1e5a      	subs	r2, r3, #1
 800201a:	60fa      	str	r2, [r7, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1f9      	bne.n	8002014 <RCC_Delay+0x1c>
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	2000002c 	.word	0x2000002c
 8002030:	10624dd3 	.word	0x10624dd3

08002034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e041      	b.n	80020ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d106      	bne.n	8002060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7fe ff1e 	bl	8000e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3304      	adds	r3, #4
 8002070:	4619      	mov	r1, r3
 8002072:	4610      	mov	r0, r2
 8002074:	f000 fa6a 	bl	800254c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d001      	beq.n	80020ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e035      	b.n	8002158 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2202      	movs	r2, #2
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a16      	ldr	r2, [pc, #88]	; (8002164 <HAL_TIM_Base_Start_IT+0x90>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d009      	beq.n	8002122 <HAL_TIM_Base_Start_IT+0x4e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002116:	d004      	beq.n	8002122 <HAL_TIM_Base_Start_IT+0x4e>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a12      	ldr	r2, [pc, #72]	; (8002168 <HAL_TIM_Base_Start_IT+0x94>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d111      	bne.n	8002146 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2b06      	cmp	r3, #6
 8002132:	d010      	beq.n	8002156 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002144:	e007      	b.n	8002156 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f042 0201 	orr.w	r2, r2, #1
 8002154:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40012c00 	.word	0x40012c00
 8002168:	40000400 	.word	0x40000400

0800216c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b02      	cmp	r3, #2
 8002180:	d122      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b02      	cmp	r3, #2
 800218e:	d11b      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0202 	mvn.w	r2, #2
 8002198:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f9b1 	bl	8002516 <HAL_TIM_IC_CaptureCallback>
 80021b4:	e005      	b.n	80021c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f9a4 	bl	8002504 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f9b3 	bl	8002528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	2b04      	cmp	r3, #4
 80021d4:	d122      	bne.n	800221c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	2b04      	cmp	r3, #4
 80021e2:	d11b      	bne.n	800221c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0204 	mvn.w	r2, #4
 80021ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2202      	movs	r2, #2
 80021f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f987 	bl	8002516 <HAL_TIM_IC_CaptureCallback>
 8002208:	e005      	b.n	8002216 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f97a 	bl	8002504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 f989 	bl	8002528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b08      	cmp	r3, #8
 8002228:	d122      	bne.n	8002270 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b08      	cmp	r3, #8
 8002236:	d11b      	bne.n	8002270 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f06f 0208 	mvn.w	r2, #8
 8002240:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2204      	movs	r2, #4
 8002246:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	69db      	ldr	r3, [r3, #28]
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f95d 	bl	8002516 <HAL_TIM_IC_CaptureCallback>
 800225c:	e005      	b.n	800226a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f950 	bl	8002504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f000 f95f 	bl	8002528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	2b10      	cmp	r3, #16
 800227c:	d122      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	f003 0310 	and.w	r3, r3, #16
 8002288:	2b10      	cmp	r3, #16
 800228a:	d11b      	bne.n	80022c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f06f 0210 	mvn.w	r2, #16
 8002294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2208      	movs	r2, #8
 800229a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f933 	bl	8002516 <HAL_TIM_IC_CaptureCallback>
 80022b0:	e005      	b.n	80022be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f926 	bl	8002504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 f935 	bl	8002528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d10e      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d107      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f06f 0201 	mvn.w	r2, #1
 80022e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7fe fe32 	bl	8000f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022fa:	2b80      	cmp	r3, #128	; 0x80
 80022fc:	d10e      	bne.n	800231c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002308:	2b80      	cmp	r3, #128	; 0x80
 800230a:	d107      	bne.n	800231c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f000 fa67 	bl	80027ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002326:	2b40      	cmp	r3, #64	; 0x40
 8002328:	d10e      	bne.n	8002348 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002334:	2b40      	cmp	r3, #64	; 0x40
 8002336:	d107      	bne.n	8002348 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002340:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f8f9 	bl	800253a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f003 0320 	and.w	r3, r3, #32
 8002352:	2b20      	cmp	r3, #32
 8002354:	d10e      	bne.n	8002374 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f003 0320 	and.w	r3, r3, #32
 8002360:	2b20      	cmp	r3, #32
 8002362:	d107      	bne.n	8002374 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0220 	mvn.w	r2, #32
 800236c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 fa32 	bl	80027d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_TIM_ConfigClockSource+0x18>
 8002390:	2302      	movs	r3, #2
 8002392:	e0b3      	b.n	80024fc <HAL_TIM_ConfigClockSource+0x180>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023cc:	d03e      	beq.n	800244c <HAL_TIM_ConfigClockSource+0xd0>
 80023ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d2:	f200 8087 	bhi.w	80024e4 <HAL_TIM_ConfigClockSource+0x168>
 80023d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023da:	f000 8085 	beq.w	80024e8 <HAL_TIM_ConfigClockSource+0x16c>
 80023de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e2:	d87f      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x168>
 80023e4:	2b70      	cmp	r3, #112	; 0x70
 80023e6:	d01a      	beq.n	800241e <HAL_TIM_ConfigClockSource+0xa2>
 80023e8:	2b70      	cmp	r3, #112	; 0x70
 80023ea:	d87b      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x168>
 80023ec:	2b60      	cmp	r3, #96	; 0x60
 80023ee:	d050      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0x116>
 80023f0:	2b60      	cmp	r3, #96	; 0x60
 80023f2:	d877      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x168>
 80023f4:	2b50      	cmp	r3, #80	; 0x50
 80023f6:	d03c      	beq.n	8002472 <HAL_TIM_ConfigClockSource+0xf6>
 80023f8:	2b50      	cmp	r3, #80	; 0x50
 80023fa:	d873      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x168>
 80023fc:	2b40      	cmp	r3, #64	; 0x40
 80023fe:	d058      	beq.n	80024b2 <HAL_TIM_ConfigClockSource+0x136>
 8002400:	2b40      	cmp	r3, #64	; 0x40
 8002402:	d86f      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x168>
 8002404:	2b30      	cmp	r3, #48	; 0x30
 8002406:	d064      	beq.n	80024d2 <HAL_TIM_ConfigClockSource+0x156>
 8002408:	2b30      	cmp	r3, #48	; 0x30
 800240a:	d86b      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x168>
 800240c:	2b20      	cmp	r3, #32
 800240e:	d060      	beq.n	80024d2 <HAL_TIM_ConfigClockSource+0x156>
 8002410:	2b20      	cmp	r3, #32
 8002412:	d867      	bhi.n	80024e4 <HAL_TIM_ConfigClockSource+0x168>
 8002414:	2b00      	cmp	r3, #0
 8002416:	d05c      	beq.n	80024d2 <HAL_TIM_ConfigClockSource+0x156>
 8002418:	2b10      	cmp	r3, #16
 800241a:	d05a      	beq.n	80024d2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800241c:	e062      	b.n	80024e4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	6899      	ldr	r1, [r3, #8]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	f000 f95c 	bl	80026ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002440:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	609a      	str	r2, [r3, #8]
      break;
 800244a:	e04e      	b.n	80024ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	6899      	ldr	r1, [r3, #8]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f000 f945 	bl	80026ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800246e:	609a      	str	r2, [r3, #8]
      break;
 8002470:	e03b      	b.n	80024ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	6859      	ldr	r1, [r3, #4]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	461a      	mov	r2, r3
 8002480:	f000 f8bc 	bl	80025fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2150      	movs	r1, #80	; 0x50
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f913 	bl	80026b6 <TIM_ITRx_SetConfig>
      break;
 8002490:	e02b      	b.n	80024ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	6859      	ldr	r1, [r3, #4]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	461a      	mov	r2, r3
 80024a0:	f000 f8da 	bl	8002658 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2160      	movs	r1, #96	; 0x60
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f903 	bl	80026b6 <TIM_ITRx_SetConfig>
      break;
 80024b0:	e01b      	b.n	80024ea <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6818      	ldr	r0, [r3, #0]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6859      	ldr	r1, [r3, #4]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	461a      	mov	r2, r3
 80024c0:	f000 f89c 	bl	80025fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2140      	movs	r1, #64	; 0x40
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 f8f3 	bl	80026b6 <TIM_ITRx_SetConfig>
      break;
 80024d0:	e00b      	b.n	80024ea <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4619      	mov	r1, r3
 80024dc:	4610      	mov	r0, r2
 80024de:	f000 f8ea 	bl	80026b6 <TIM_ITRx_SetConfig>
        break;
 80024e2:	e002      	b.n	80024ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80024e4:	bf00      	nop
 80024e6:	e000      	b.n	80024ea <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80024e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	bc80      	pop	{r7}
 8002526:	4770      	bx	lr

08002528 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800253a:	b480      	push	{r7}
 800253c:	b083      	sub	sp, #12
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a25      	ldr	r2, [pc, #148]	; (80025f4 <TIM_Base_SetConfig+0xa8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d007      	beq.n	8002574 <TIM_Base_SetConfig+0x28>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256a:	d003      	beq.n	8002574 <TIM_Base_SetConfig+0x28>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a22      	ldr	r2, [pc, #136]	; (80025f8 <TIM_Base_SetConfig+0xac>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d108      	bne.n	8002586 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	4313      	orrs	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a1a      	ldr	r2, [pc, #104]	; (80025f4 <TIM_Base_SetConfig+0xa8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d007      	beq.n	800259e <TIM_Base_SetConfig+0x52>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002594:	d003      	beq.n	800259e <TIM_Base_SetConfig+0x52>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a17      	ldr	r2, [pc, #92]	; (80025f8 <TIM_Base_SetConfig+0xac>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d108      	bne.n	80025b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a07      	ldr	r2, [pc, #28]	; (80025f4 <TIM_Base_SetConfig+0xa8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d103      	bne.n	80025e4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	691a      	ldr	r2, [r3, #16]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	615a      	str	r2, [r3, #20]
}
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr
 80025f4:	40012c00 	.word	0x40012c00
 80025f8:	40000400 	.word	0x40000400

080025fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b087      	sub	sp, #28
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a1b      	ldr	r3, [r3, #32]
 8002612:	f023 0201 	bic.w	r2, r3, #1
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	011b      	lsls	r3, r3, #4
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	4313      	orrs	r3, r2
 8002630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f023 030a 	bic.w	r3, r3, #10
 8002638:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4313      	orrs	r3, r2
 8002640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	621a      	str	r2, [r3, #32]
}
 800264e:	bf00      	nop
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	f023 0210 	bic.w	r2, r3, #16
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002682:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	031b      	lsls	r3, r3, #12
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	4313      	orrs	r3, r2
 800268c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002694:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	693a      	ldr	r2, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	621a      	str	r2, [r3, #32]
}
 80026ac:	bf00      	nop
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr

080026b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b085      	sub	sp, #20
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	f043 0307 	orr.w	r3, r3, #7
 80026d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68fa      	ldr	r2, [r7, #12]
 80026de:	609a      	str	r2, [r3, #8]
}
 80026e0:	bf00      	nop
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr

080026ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b087      	sub	sp, #28
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	60f8      	str	r0, [r7, #12]
 80026f2:	60b9      	str	r1, [r7, #8]
 80026f4:	607a      	str	r2, [r7, #4]
 80026f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002704:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	021a      	lsls	r2, r3, #8
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	431a      	orrs	r2, r3
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	4313      	orrs	r3, r2
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	609a      	str	r2, [r3, #8]
}
 800271e:	bf00      	nop
 8002720:	371c      	adds	r7, #28
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800273c:	2302      	movs	r3, #2
 800273e:	e041      	b.n	80027c4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002766:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	4313      	orrs	r3, r2
 8002770:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d009      	beq.n	8002798 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800278c:	d004      	beq.n	8002798 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a10      	ldr	r2, [pc, #64]	; (80027d4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d10c      	bne.n	80027b2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800279e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3714      	adds	r7, #20
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40012c00 	.word	0x40012c00
 80027d4:	40000400 	.word	0x40000400

080027d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bc80      	pop	{r7}
 80027e8:	4770      	bx	lr

080027ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr

080027fc <__libc_init_array>:
 80027fc:	b570      	push	{r4, r5, r6, lr}
 80027fe:	2600      	movs	r6, #0
 8002800:	4d0c      	ldr	r5, [pc, #48]	; (8002834 <__libc_init_array+0x38>)
 8002802:	4c0d      	ldr	r4, [pc, #52]	; (8002838 <__libc_init_array+0x3c>)
 8002804:	1b64      	subs	r4, r4, r5
 8002806:	10a4      	asrs	r4, r4, #2
 8002808:	42a6      	cmp	r6, r4
 800280a:	d109      	bne.n	8002820 <__libc_init_array+0x24>
 800280c:	f000 f822 	bl	8002854 <_init>
 8002810:	2600      	movs	r6, #0
 8002812:	4d0a      	ldr	r5, [pc, #40]	; (800283c <__libc_init_array+0x40>)
 8002814:	4c0a      	ldr	r4, [pc, #40]	; (8002840 <__libc_init_array+0x44>)
 8002816:	1b64      	subs	r4, r4, r5
 8002818:	10a4      	asrs	r4, r4, #2
 800281a:	42a6      	cmp	r6, r4
 800281c:	d105      	bne.n	800282a <__libc_init_array+0x2e>
 800281e:	bd70      	pop	{r4, r5, r6, pc}
 8002820:	f855 3b04 	ldr.w	r3, [r5], #4
 8002824:	4798      	blx	r3
 8002826:	3601      	adds	r6, #1
 8002828:	e7ee      	b.n	8002808 <__libc_init_array+0xc>
 800282a:	f855 3b04 	ldr.w	r3, [r5], #4
 800282e:	4798      	blx	r3
 8002830:	3601      	adds	r6, #1
 8002832:	e7f2      	b.n	800281a <__libc_init_array+0x1e>
 8002834:	0800288c 	.word	0x0800288c
 8002838:	0800288c 	.word	0x0800288c
 800283c:	0800288c 	.word	0x0800288c
 8002840:	08002890 	.word	0x08002890

08002844 <memset>:
 8002844:	4603      	mov	r3, r0
 8002846:	4402      	add	r2, r0
 8002848:	4293      	cmp	r3, r2
 800284a:	d100      	bne.n	800284e <memset+0xa>
 800284c:	4770      	bx	lr
 800284e:	f803 1b01 	strb.w	r1, [r3], #1
 8002852:	e7f9      	b.n	8002848 <memset+0x4>

08002854 <_init>:
 8002854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002856:	bf00      	nop
 8002858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800285a:	bc08      	pop	{r3}
 800285c:	469e      	mov	lr, r3
 800285e:	4770      	bx	lr

08002860 <_fini>:
 8002860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002862:	bf00      	nop
 8002864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002866:	bc08      	pop	{r3}
 8002868:	469e      	mov	lr, r3
 800286a:	4770      	bx	lr
